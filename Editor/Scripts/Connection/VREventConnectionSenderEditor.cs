using System.Reflection;
using System.Collections.Generic;
using UnityEditor;
using UnityEngine;
using System.Linq;

namespace IVLab.MinVR3
{
    [CustomEditor(typeof(VREventConnectionSender))]
    public class VREventConnectionSenderEditor : Editor
    {
        public void OnEnable()
        {
            m_UseSendListProp = serializedObject.FindProperty("m_UseSendList");
            m_SendListPrototypesProp = serializedObject.FindProperty("m_SendListPrototypes");
            m_SendListStartsWithStringsProp = serializedObject.FindProperty("m_SendListStartsWithStrings");

            m_UseNoSendListProp = serializedObject.FindProperty("m_UseNoSendList");
            m_NoSendListPrototypesProp = serializedObject.FindProperty("m_NoSendListPrototypes");
            m_NoSendListStartsWithStringsProp = serializedObject.FindProperty("m_NoSendListStartsWithStrings");
        }

        public override void OnInspectorGUI()
        {
            serializedObject.Update();
            VREventConnectionSender script = (VREventConnectionSender) target;

            // Check to see if the GameObject has the proper script attached
            IVREventConnection conn;
            if (!script.TryGetComponent<IVREventConnection>(out conn))
            {
                var assembly = Assembly.GetAssembly(typeof(IVREventConnection));
                var vrEventConnectionTypes = assembly
                    .GetTypes()
                    .Where(t => t != typeof(IVREventConnection))
                    .Where(t => typeof(IVREventConnection).IsAssignableFrom(t))
                    .Select(t => t.Name);
                var typeListStr = "\n  - " + string.Join("\n  - ", vrEventConnectionTypes);

                EditorGUILayout.HelpBox("Error: the VREventConnectionSender must have an IVREventConnection " +
                    "attached to the same object. Please attach one of the following scripts:\n" + typeListStr,
                    MessageType.Error);
                return;
            }

            EditorGUILayout.HelpBox(new GUIContent("You can send only a subset of VREvents by specifying a " +
                "Send-List and/or a No-Send-List."));

            EditorGUILayout.PropertyField(m_UseSendListProp);
            EditorGUILayout.PropertyField(m_UseNoSendListProp);

            if ((!m_UseSendListProp.boolValue) && (!m_UseNoSendListProp.boolValue)) {
                EditorGUILayout.Space();
                EditorGUILayout.HelpBox(new GUIContent("Sending ALL VREvents"));
            }

            if (m_UseSendListProp.boolValue) {

                EditorGUILayout.Space();
                EditorGUILayout.Space();
                EditorGUILayout.HelpBox(new GUIContent("The event-matching criteria can be specified in two " +
                    "ways using the two lists below.  The first list uses VREventPrototypes and this is good for " +
                    "specifying a small set of specific events to send.  The second list is used for string matching " +
                    "on the event name.  Any events that START WITH any of the strings in this list are sent.  This " +
                    "is good for sending all events that begin with some prefix (e.g., all generated by a specific device)."));

                m_ShowFoldoutSend = EditorGUILayout.BeginFoldoutHeaderGroup(m_ShowFoldoutSend, "Send List VREvent Prototypes");

                if (m_ShowFoldoutSend) {
                    List<int> idxToDelete = new List<int>();

                    for (int evtNum = 0; evtNum < m_SendListPrototypesProp.arraySize; evtNum++) {
                        // Event name and event payload type
                        EditorGUILayout.BeginHorizontal();

                        EditorGUILayout.PropertyField(m_SendListPrototypesProp.GetArrayElementAtIndex(evtNum));

                        if (GUILayout.Button("-", GUILayout.Width(EditorGUIUtility.singleLineHeight))) {
                            idxToDelete.Add(evtNum);
                        }

                        EditorGUILayout.EndHorizontal();
                    }

                    foreach (int idx in idxToDelete) {
                        script.sendListPrototypes.RemoveAt(idx);
                    }

                    if (GUILayout.Button("+")) {
                        if (script.sendListPrototypes == null) {
                            script.sendListPrototypes = new List<VREventPrototypeAny>();
                        }
                        script.sendListPrototypes.Add(VREventPrototypeAny.Create(""));
                    }
                }

                EditorGUILayout.EndFoldoutHeaderGroup();

                EditorGUILayout.PropertyField(m_SendListStartsWithStringsProp);

            }

            if (m_UseNoSendListProp.boolValue) {
                EditorGUILayout.Space();
                EditorGUILayout.Space();
                EditorGUILayout.HelpBox(new GUIContent("The event-matching criteria can be specified in two " +
                    "ways using the two lists below.  The first list uses VREventPrototypes and this is good for " +
                    "specifying a small set of specific events to block.  The second list is used for string matching " +
                    "on the event name.  Any events that START WITH any of the strings in this list are blocked.  This " +
                    "is good for blocking all events that begin with some prefix (e.g., all generated by a specific device)."));

                m_ShowFoldoutNoSend = EditorGUILayout.BeginFoldoutHeaderGroup(m_ShowFoldoutNoSend, "No Send List VREvent Prototypes");

                if (m_ShowFoldoutNoSend) {

                    List<int> idxToDelete = new List<int>();

                    for (int evtNum = 0; evtNum < m_NoSendListPrototypesProp.arraySize; evtNum++) {
                        // Event name and event payload type
                        EditorGUILayout.BeginHorizontal();

                        EditorGUILayout.PropertyField(m_NoSendListPrototypesProp.GetArrayElementAtIndex(evtNum));

                        if (GUILayout.Button("-", GUILayout.Width(EditorGUIUtility.singleLineHeight))) {
                            idxToDelete.Add(evtNum);
                        }

                        EditorGUILayout.EndHorizontal();
                    }

                    foreach (int idx in idxToDelete) {
                        script.noSendListPrototypes.RemoveAt(idx);
                    }

                    if (GUILayout.Button("+")) {
                        script.noSendListPrototypes.Add(VREventPrototypeAny.Create(""));
                    }
                }
                EditorGUILayout.EndFoldoutHeaderGroup();

                EditorGUILayout.PropertyField(m_NoSendListStartsWithStringsProp);
            }

            serializedObject.ApplyModifiedProperties();
        }


        bool m_ShowFoldoutSend = true;
        bool m_ShowFoldoutNoSend = true;

        SerializedProperty m_UseSendListProp;
        SerializedProperty m_SendListPrototypesProp;
        SerializedProperty m_SendListStartsWithStringsProp;

        SerializedProperty m_UseNoSendListProp;
        SerializedProperty m_NoSendListPrototypesProp;
        SerializedProperty m_NoSendListStartsWithStringsProp;

    }

}