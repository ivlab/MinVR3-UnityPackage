{
  "api/ES.FisheyeRenderer.html": {
    "href": "api/ES.FisheyeRenderer.html",
    "title": "Class FisheyeRenderer | MinVR3",
    "keywords": "Class FisheyeRenderer Inheritance System.Object FisheyeRenderer Namespace : ES Assembly : api-documentation.dll Syntax public class FisheyeRenderer : MonoBehaviour"
  },
  "api/ES.FisheyeRenderer.Resolution.html": {
    "href": "api/ES.FisheyeRenderer.Resolution.html",
    "title": "Enum FisheyeRenderer.Resolution | MinVR3",
    "keywords": "Enum FisheyeRenderer.Resolution Namespace : ES Assembly : api-documentation.dll Syntax public enum Resolution Fields Name Description _1024 _2048 _4096 _512"
  },
  "api/ES.html": {
    "href": "api/ES.html",
    "title": "Namespace ES | MinVR3",
    "keywords": "Namespace ES Classes FisheyeRenderer Enums FisheyeRenderer.Resolution"
  },
  "api/Global.CavePaintingBrushCursor.html": {
    "href": "api/Global.CavePaintingBrushCursor.html",
    "title": "Class CavePaintingBrushCursor | MinVR3",
    "keywords": "Class CavePaintingBrushCursor Creates a mesh for the 3D Brush cursor used in the original CavePainting, 2001 paper. Inheritance System.Object CavePaintingBrushCursor Namespace : Global Assembly : api-documentation.dll Syntax public class CavePaintingBrushCursor : MonoBehaviour Fields | Improve this Doc View Source indices Declaration public int[] indices Field Value Type Description System.Int32 [] | Improve this Doc View Source origIndices Declaration public static int[] origIndices Field Value Type Description System.Int32 [] | Improve this Doc View Source origVertices Declaration public static Vector3[] origVertices Field Value Type Description Vector3 [] | Improve this Doc View Source vertices Declaration public Vector3[] vertices Field Value Type Description Vector3 []"
  },
  "api/Global.html": {
    "href": "api/Global.html",
    "title": "Namespace Global | MinVR3",
    "keywords": "Namespace Global Classes CavePaintingBrushCursor Creates a mesh for the 3D Brush cursor used in the original CavePainting, 2001 paper. Matrix4x4Extensions SharedToken Implements a binary semaphor or lock that can be acquired by GameObjects. In a 3DUI system with multiple widgets, this can be used to control which widget has the current input focus. TouchscreenState TransformExtensions Enums TouchscreenState.TouchInputPhase"
  },
  "api/Global.Matrix4x4Extensions.html": {
    "href": "api/Global.Matrix4x4Extensions.html",
    "title": "Class Matrix4x4Extensions | MinVR3",
    "keywords": "Class Matrix4x4Extensions Inheritance System.Object Matrix4x4Extensions Namespace : Global Assembly : api-documentation.dll Syntax public static class Matrix4x4Extensions Methods | Improve this Doc View Source GetRotation(Matrix4x4) Declaration public static Quaternion GetRotation(this Matrix4x4 m) Parameters Type Name Description Matrix4x4 m Returns Type Description Quaternion | Improve this Doc View Source GetTranslation(Matrix4x4) Declaration public static Vector3 GetTranslation(this Matrix4x4 m) Parameters Type Name Description Matrix4x4 m Returns Type Description Vector3"
  },
  "api/Global.SharedToken.html": {
    "href": "api/Global.SharedToken.html",
    "title": "Class SharedToken | MinVR3",
    "keywords": "Class SharedToken Implements a binary semaphor or lock that can be acquired by GameObjects. In a 3DUI system with multiple widgets, this can be used to control which widget has the current input focus. Inheritance System.Object SharedToken Namespace : Global Assembly : api-documentation.dll Syntax public class SharedToken : MonoBehaviour Properties | Improve this Doc View Source currentOwner Declaration public MonoBehaviour currentOwner { get; } Property Value Type Description MonoBehaviour | Improve this Doc View Source tokenName Declaration public string tokenName { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source HasToken(MonoBehaviour) Declaration public bool HasToken(MonoBehaviour possibleOwner) Parameters Type Name Description MonoBehaviour possibleOwner Returns Type Description System.Boolean | Improve this Doc View Source ReleaseToken(MonoBehaviour) Declaration public bool ReleaseToken(MonoBehaviour owner) Parameters Type Name Description MonoBehaviour owner Returns Type Description System.Boolean | Improve this Doc View Source RequestToken(MonoBehaviour) Declaration public bool RequestToken(MonoBehaviour requester) Parameters Type Name Description MonoBehaviour requester Returns Type Description System.Boolean"
  },
  "api/Global.TouchscreenState.html": {
    "href": "api/Global.TouchscreenState.html",
    "title": "Class TouchscreenState | MinVR3",
    "keywords": "Class TouchscreenState Inheritance System.Object TouchscreenState Namespace : Global Assembly : api-documentation.dll Syntax public static class TouchscreenState Methods | Improve this Doc View Source GetTouchCount(Boolean) Declaration public static int GetTouchCount(bool forceLegacy) Parameters Type Name Description System.Boolean forceLegacy Returns Type Description System.Int32 | Improve this Doc View Source GetTouchID(Int32, Boolean) Declaration public static int GetTouchID(int touchIndex, bool forceLegacy) Parameters Type Name Description System.Int32 touchIndex System.Boolean forceLegacy Returns Type Description System.Int32 | Improve this Doc View Source GetTouchPhase(Int32, Boolean) Declaration public static TouchscreenState.TouchInputPhase GetTouchPhase(int touchIndex, bool forceLegacy) Parameters Type Name Description System.Int32 touchIndex System.Boolean forceLegacy Returns Type Description TouchscreenState.TouchInputPhase | Improve this Doc View Source GetTouchPosition(Int32, Boolean) Declaration public static Vector2 GetTouchPosition(int touchIndex, bool forceLegacy) Parameters Type Name Description System.Int32 touchIndex System.Boolean forceLegacy Returns Type Description Vector2 | Improve this Doc View Source GetTouchPressure(Int32, Boolean) Declaration public static float GetTouchPressure(int touchIndex, bool forceLegacy) Parameters Type Name Description System.Int32 touchIndex System.Boolean forceLegacy Returns Type Description System.Single"
  },
  "api/Global.TouchscreenState.TouchInputPhase.html": {
    "href": "api/Global.TouchscreenState.TouchInputPhase.html",
    "title": "Enum TouchscreenState.TouchInputPhase | MinVR3",
    "keywords": "Enum TouchscreenState.TouchInputPhase Namespace : Global Assembly : api-documentation.dll Syntax public enum TouchInputPhase Fields Name Description Began Canceled Ended Moved None Stationary"
  },
  "api/Global.TransformExtensions.html": {
    "href": "api/Global.TransformExtensions.html",
    "title": "Class TransformExtensions | MinVR3",
    "keywords": "Class TransformExtensions Inheritance System.Object TransformExtensions Namespace : Global Assembly : api-documentation.dll Syntax public static class TransformExtensions Methods | Improve this Doc View Source RotateAroundLocalOrigin(Transform, Quaternion) Declaration public static void RotateAroundLocalOrigin(this Transform t, Quaternion deltaRot) Parameters Type Name Description Transform t Quaternion deltaRot | Improve this Doc View Source RotateAroundLocalPoint(Transform, Vector3, Quaternion) Declaration public static void RotateAroundLocalPoint(this Transform t, Vector3 point, Quaternion deltaRot) Parameters Type Name Description Transform t Vector3 point Quaternion deltaRot | Improve this Doc View Source RotateAroundWorldOrigin(Transform, Quaternion) Declaration public static void RotateAroundWorldOrigin(this Transform t, Quaternion deltaRot) Parameters Type Name Description Transform t Quaternion deltaRot | Improve this Doc View Source RotateAroundWorldPoint(Transform, Vector3, Quaternion) Declaration public static void RotateAroundWorldPoint(this Transform t, Vector3 point, Quaternion deltaRot) Parameters Type Name Description Transform t Vector3 point Quaternion deltaRot | Improve this Doc View Source ScaleAroundLocalOrigin(Transform, Single) Declaration public static void ScaleAroundLocalOrigin(this Transform t, float deltaScale) Parameters Type Name Description Transform t System.Single deltaScale | Improve this Doc View Source ScaleAroundLocalPoint(Transform, Vector3, Single) Declaration public static void ScaleAroundLocalPoint(this Transform t, Vector3 point, float deltaScale) Parameters Type Name Description Transform t Vector3 point System.Single deltaScale | Improve this Doc View Source ScaleAroundWorldOrigin(Transform, Single) Declaration public static void ScaleAroundWorldOrigin(this Transform t, float deltaScale) Parameters Type Name Description Transform t System.Single deltaScale | Improve this Doc View Source ScaleAroundWorldPoint(Transform, Vector3, Single) Declaration public static void ScaleAroundWorldPoint(this Transform t, Vector3 point, float deltaScale) Parameters Type Name Description Transform t Vector3 point System.Single deltaScale | Improve this Doc View Source TranslateByLocalVector(Transform, Vector3) Declaration public static void TranslateByLocalVector(this Transform t, Vector3 deltaTrans) Parameters Type Name Description Transform t Vector3 deltaTrans | Improve this Doc View Source TranslateByWorldVector(Transform, Vector3) Declaration public static void TranslateByWorldVector(this Transform t, Vector3 deltaTrans) Parameters Type Name Description Transform t Vector3 deltaTrans"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "API Overview | MinVR3",
    "keywords": "API Overview \"MinVR3\" VR Coordinate Spaces MinVRRoot (RoomSpace Origin) VRConfigs Walkthrough an Example Prefabs combine Display(s) + InputDevices Aliases VREvents in Detail VREvents and VREventPrototypes Input Devices and Virtual Input Devices VREvent Processing (Queue, Filters, Aliases) Remote Connections Cluster Support \"OpenUp\" - The Spatial Interaction Technique Library BuildingBlocks FSM SharedToken SimpleEventListener TrackedPoseDriver Cursors Desktop TrackballCamera Widgets Menus ColorPicker Selection Manipulation Painting"
  },
  "api/IVLab.MinVR3.BasicHighlighter.html": {
    "href": "api/IVLab.MinVR3.BasicHighlighter.html",
    "title": "Class BasicHighlighter | MinVR3",
    "keywords": "Class BasicHighlighter Inheritance System.Object BasicHighlighter Implements IVREventListener Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public class BasicHighlighter : MonoBehaviour, IVREventListener Fields | Improve this Doc View Source m_HighlightMaterial Declaration public Material m_HighlightMaterial Field Value Type Description Material | Improve this Doc View Source m_SelectEvent Declaration public VREventPrototypeGameObject m_SelectEvent Field Value Type Description VREventPrototypeGameObject | Improve this Doc View Source m_UnselectEvent Declaration public VREventPrototypeGameObject m_UnselectEvent Field Value Type Description VREventPrototypeGameObject Methods | Improve this Doc View Source OnVREvent(VREvent) Declaration public void OnVREvent(VREvent vrEvent) Parameters Type Name Description VREvent vrEvent | Improve this Doc View Source StartListening() Declaration public void StartListening() | Improve this Doc View Source StopListening() Declaration public void StopListening() Implements IVREventListener"
  },
  "api/IVLab.MinVR3.BasicObjectSelector.html": {
    "href": "api/IVLab.MinVR3.BasicObjectSelector.html",
    "title": "Class BasicObjectSelector | MinVR3",
    "keywords": "Class BasicObjectSelector Inheritance System.Object BasicObjectSelector BimanualObjectSelector Implements IVREventProducer Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public class BasicObjectSelector : MonoBehaviour, IVREventProducer Fields | Improve this Doc View Source m_CursorTransform Declaration protected Transform m_CursorTransform Field Value Type Description Transform | Improve this Doc View Source m_IgnoreMask Declaration protected LayerMask m_IgnoreMask Field Value Type Description LayerMask | Improve this Doc View Source m_PointerDistance Declaration protected float m_PointerDistance Field Value Type Description System.Single | Improve this Doc View Source m_Selected Declaration protected Collider m_Selected Field Value Type Description Collider | Improve this Doc View Source m_SelectionMode Declaration protected BasicObjectSelector.SelectionMode m_SelectionMode Field Value Type Description BasicObjectSelector.SelectionMode | Improve this Doc View Source m_TouchRadius Declaration protected float m_TouchRadius Field Value Type Description System.Single Methods | Improve this Doc View Source CheckSelection(Transform, BasicObjectSelector.SelectionMode, LayerMask, Single, Single) Declaration protected Collider CheckSelection(Transform cursorTransform, BasicObjectSelector.SelectionMode selectionMode, LayerMask ignoreMask, float touchRadius, float pointerDistance) Parameters Type Name Description Transform cursorTransform BasicObjectSelector.SelectionMode selectionMode LayerMask ignoreMask System.Single touchRadius System.Single pointerDistance Returns Type Description Collider | Improve this Doc View Source GetEventPrototypes() Declaration public List<IVREventPrototype> GetEventPrototypes() Returns Type Description System.Collections.Generic.List < IVREventPrototype > | Improve this Doc View Source Reset() Declaration public virtual void Reset() | Improve this Doc View Source TryChangeSelection(Collider) Declaration protected bool TryChangeSelection(Collider nowSelected) Parameters Type Name Description Collider nowSelected Returns Type Description System.Boolean | Improve this Doc View Source Update() Declaration public virtual void Update() Implements IVREventProducer"
  },
  "api/IVLab.MinVR3.BasicObjectSelector.SelectionMode.html": {
    "href": "api/IVLab.MinVR3.BasicObjectSelector.SelectionMode.html",
    "title": "Enum BasicObjectSelector.SelectionMode | MinVR3",
    "keywords": "Enum BasicObjectSelector.SelectionMode Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public enum SelectionMode Fields Name Description PointAt Touch"
  },
  "api/IVLab.MinVR3.BimanualObjectSelector.html": {
    "href": "api/IVLab.MinVR3.BimanualObjectSelector.html",
    "title": "Class BimanualObjectSelector | MinVR3",
    "keywords": "Class BimanualObjectSelector Inheritance System.Object BasicObjectSelector BimanualObjectSelector Implements IVREventProducer Inherited Members BasicObjectSelector.TryChangeSelection(Collider) BasicObjectSelector.CheckSelection(Transform, BasicObjectSelector.SelectionMode, LayerMask, Single, Single) BasicObjectSelector.GetEventPrototypes() BasicObjectSelector.m_CursorTransform BasicObjectSelector.m_SelectionMode BasicObjectSelector.m_IgnoreMask BasicObjectSelector.m_TouchRadius BasicObjectSelector.m_PointerDistance BasicObjectSelector.m_Selected Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public class BimanualObjectSelector : BasicObjectSelector, IVREventProducer Methods | Improve this Doc View Source Reset() Declaration public override void Reset() Overrides BasicObjectSelector.Reset() | Improve this Doc View Source Update() Declaration public override void Update() Overrides BasicObjectSelector.Update() Implements IVREventProducer"
  },
  "api/IVLab.MinVR3.CallableEventProducer.html": {
    "href": "api/IVLab.MinVR3.CallableEventProducer.html",
    "title": "Class CallableEventProducer | MinVR3",
    "keywords": "Class CallableEventProducer Produces the defined event when the function ProduceEvent() is called. This functions as a null event producer if the function is never called. NOTE: only works with VREvents w/no payload. Inheritance System.Object CallableEventProducer Implements IVREventProducer Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public class CallableEventProducer : MonoBehaviour, IVREventProducer Methods | Improve this Doc View Source GetEventPrototypes() Declaration public List<IVREventPrototype> GetEventPrototypes() Returns Type Description System.Collections.Generic.List < IVREventPrototype > | Improve this Doc View Source ProduceEvent(String) Declaration public void ProduceEvent(string name) Parameters Type Name Description System.String name Implements IVREventProducer"
  },
  "api/IVLab.MinVR3.ClusterClient.html": {
    "href": "api/IVLab.MinVR3.ClusterClient.html",
    "title": "Class ClusterClient | MinVR3",
    "keywords": "Class ClusterClient Inheritance System.Object ClusterClient Implements IClusterNode Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public class ClusterClient : MonoBehaviour, IClusterNode Fields | Improve this Doc View Source serverIPAddress Declaration public string serverIPAddress Field Value Type Description System.String | Improve this Doc View Source serverPort Declaration public int serverPort Field Value Type Description System.Int32 Methods | Improve this Doc View Source Initialize() Declaration public void Initialize() | Improve this Doc View Source Shutdown() Declaration public void Shutdown() | Improve this Doc View Source SynchronizeInputEventsAcrossAllNodes(ref List<VREvent>) Declaration public void SynchronizeInputEventsAcrossAllNodes(ref List<VREvent> inputEvents) Parameters Type Name Description System.Collections.Generic.List < VREvent > inputEvents | Improve this Doc View Source SynchronizeSwapBuffersAcrossAllNodes() Declaration public void SynchronizeSwapBuffersAcrossAllNodes() Implements IClusterNode"
  },
  "api/IVLab.MinVR3.ClusterServer.html": {
    "href": "api/IVLab.MinVR3.ClusterServer.html",
    "title": "Class ClusterServer | MinVR3",
    "keywords": "Class ClusterServer Inheritance System.Object ClusterServer Implements IClusterNode Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public class ClusterServer : MonoBehaviour, IClusterNode Fields | Improve this Doc View Source numClients Declaration public int numClients Field Value Type Description System.Int32 | Improve this Doc View Source serverPort Declaration public int serverPort Field Value Type Description System.Int32 Methods | Improve this Doc View Source Initialize() Declaration public void Initialize() | Improve this Doc View Source Shutdown() Declaration public void Shutdown() | Improve this Doc View Source SynchronizeInputEventsAcrossAllNodes(ref List<VREvent>) Declaration public void SynchronizeInputEventsAcrossAllNodes(ref List<VREvent> inputEvents) Parameters Type Name Description System.Collections.Generic.List < VREvent > inputEvents | Improve this Doc View Source SynchronizeSwapBuffersAcrossAllNodes() Declaration public void SynchronizeSwapBuffersAcrossAllNodes() Implements IClusterNode"
  },
  "api/IVLab.MinVR3.Condition.html": {
    "href": "api/IVLab.MinVR3.Condition.html",
    "title": "Class Condition | MinVR3",
    "keywords": "Class Condition Conditions can be used to programmatically restrict the FSM's ability to transition along an arc unless some condition is met. Subclass from this class and implement the condition inside this abstract function. Then, attach your new class to the desired arc(s). Then, the arc will only be traversed when it is triggered AND the condition is true. Note that if you want a simple arc guard that does not depend on any custom code this might be better implmented using the SharedToken scriptable object, which is useful, for example, to coordinate between FSMs to determine which should have focus. Inheritance System.Object Condition Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public class Condition : MonoBehaviour Properties | Improve this Doc View Source isTrue Declaration public bool isTrue { get; set; } Property Value Type Description System.Boolean"
  },
  "api/IVLab.MinVR3.ConnectionVREventListener.html": {
    "href": "api/IVLab.MinVR3.ConnectionVREventListener.html",
    "title": "Class ConnectionVREventListener | MinVR3",
    "keywords": "Class ConnectionVREventListener MonoBehaviour that takes all MinVR3 events and sends them along this VREventConnection (for example, to a web browser.) Inheritance System.Object ConnectionVREventListener Implements IVREventListener Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public class ConnectionVREventListener : MonoBehaviour, IVREventListener Properties | Improve this Doc View Source EventNames Declaration public List<string> EventNames { get; } Property Value Type Description System.Collections.Generic.List < System.String > | Improve this Doc View Source EventTypes Declaration public List<string> EventTypes { get; } Property Value Type Description System.Collections.Generic.List < System.String > Methods | Improve this Doc View Source OnVREvent(VREvent) Declaration public void OnVREvent(VREvent evt) Parameters Type Name Description VREvent evt | Improve this Doc View Source StartListening() Declaration public void StartListening() | Improve this Doc View Source StopListening() Declaration public void StopListening() Implements IVREventListener"
  },
  "api/IVLab.MinVR3.ConnectionVREventProducer.html": {
    "href": "api/IVLab.MinVR3.ConnectionVREventProducer.html",
    "title": "Class ConnectionVREventProducer | MinVR3",
    "keywords": "Class ConnectionVREventProducer MonoBehaviour that takes events from a specified VREventConnection and places them in the VR Event Manager's Queue. Inheritance System.Object ConnectionVREventProducer Implements IVREventProducer Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public class ConnectionVREventProducer : MonoBehaviour, IVREventProducer Properties | Improve this Doc View Source EventNames Declaration public List<string> EventNames { get; } Property Value Type Description System.Collections.Generic.List < System.String > | Improve this Doc View Source EventTypes Declaration public List<string> EventTypes { get; } Property Value Type Description System.Collections.Generic.List < System.String > Methods | Improve this Doc View Source GetEventPrototypes() Declaration public List<IVREventPrototype> GetEventPrototypes() Returns Type Description System.Collections.Generic.List < IVREventPrototype > Implements IVREventProducer"
  },
  "api/IVLab.MinVR3.CoordConversion.CoordSystem.Axis.html": {
    "href": "api/IVLab.MinVR3.CoordConversion.CoordSystem.Axis.html",
    "title": "Enum CoordConversion.CoordSystem.Axis | MinVR3",
    "keywords": "Enum CoordConversion.CoordSystem.Axis Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public enum Axis Fields Name Description NegX NegY NegZ PosX PosY PosZ"
  },
  "api/IVLab.MinVR3.CoordConversion.CoordSystem.Handedness.html": {
    "href": "api/IVLab.MinVR3.CoordConversion.CoordSystem.Handedness.html",
    "title": "Enum CoordConversion.CoordSystem.Handedness | MinVR3",
    "keywords": "Enum CoordConversion.CoordSystem.Handedness Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public enum Handedness Fields Name Description LeftHanded RightHanded"
  },
  "api/IVLab.MinVR3.CoordConversion.CoordSystem.html": {
    "href": "api/IVLab.MinVR3.CoordConversion.CoordSystem.html",
    "title": "Class CoordConversion.CoordSystem | MinVR3",
    "keywords": "Class CoordConversion.CoordSystem This small internal class defines a coordinate system convention based on knowing 3 things: Whether right-handed or left-handed coordinates are used. Which direction is considered \"Up\" Which direction is considered \"Forward\" Inheritance System.Object CoordConversion.CoordSystem Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public class CoordSystem Constructors | Improve this Doc View Source CoordSystem(CoordConversion.CoordSystem.Handedness, CoordConversion.CoordSystem.Axis, CoordConversion.CoordSystem.Axis) Declaration public CoordSystem(CoordConversion.CoordSystem.Handedness h, CoordConversion.CoordSystem.Axis up, CoordConversion.CoordSystem.Axis forward) Parameters Type Name Description CoordConversion.CoordSystem.Handedness h CoordConversion.CoordSystem.Axis up CoordConversion.CoordSystem.Axis forward Fields | Improve this Doc View Source forwardAxis Declaration public CoordConversion.CoordSystem.Axis forwardAxis Field Value Type Description CoordConversion.CoordSystem.Axis | Improve this Doc View Source handedness Declaration public CoordConversion.CoordSystem.Handedness handedness Field Value Type Description CoordConversion.CoordSystem.Handedness | Improve this Doc View Source upAxis Declaration public CoordConversion.CoordSystem.Axis upAxis Field Value Type Description CoordConversion.CoordSystem.Axis Properties | Improve this Doc View Source forwardVector Declaration public Vector3 forwardVector { get; } Property Value Type Description Vector3 | Improve this Doc View Source upVector Declaration public Vector3 upVector { get; } Property Value Type Description Vector3"
  },
  "api/IVLab.MinVR3.CoordConversion.html": {
    "href": "api/IVLab.MinVR3.CoordConversion.html",
    "title": "Class CoordConversion | MinVR3",
    "keywords": "Class CoordConversion This class includes useful routines for converting between 3D coordinate systems that follow different conventions for handedness and up/forward directions. Brief background on Left-Handed vs. Right Handed Coordinates Many (most?) scientific datasets and modeling programs these days use right-handed coordinates but that is just a convention. Mathematically speaking, it is just as reasonable to use left- handed coordinates, as Unity has done and several other major graphics packages have done in the past. Luckily, you can convert between LH and RH coordinates. The conversion itself is not too hard. The hard part is that there are several valid ways to do the conversion so you need to know which conventions are used and stay consistent. This class is intended to help with this by organizing all of the conversion routines here in one place. Converting LH to RH: The big question is, which axis to negate? Converting between LH and RH coordinate systems requires negating one axis. However, the choice of which axis to negate is arbitrary. When Unity does these conversions automatically, like when you drag and drop a model file into your Unity project, it seems to have adopted the convention of negating the X axis (i.e., vertices with positive x values will have negative x values after importing). So, in this class, we intentionally follow the same convention of negating X. If you look for more info online, you will find examples that do the conversion by negating Y or Z. All of these are completely valid, it's just a convention, and we'll try to be as consistent with Unity as possible by doing the same thing and negating x. Converting between +Y=Up, +Z=Up, and other variations In addition to deciding to use a left or right-handed system, datasets and graphics toolkits often also adopt a second convention about which axis points \"Up\", which points \"Forward\", etc. This really has nothing to do with RH vs. LH decision. You could decide to use left-handed with +Y=Up or right-handed with +Y=Up or right-handed with +Z=Up or something else. However, once you pick two directions (say, Up and Forward), the third axis must follow either the right -hand rule or left-hand rule based on whether you are using right or left handed coordinates. Use the left or right hand as appropriate, start with your fingers all pointing toward +X, sweep your palm and curl your fingers toward +Y, and then your thumb should point in +Z. (Or, just Google for a picture if needed.) Once you have converted from RH to LH or vice versa you can easily change the up, forward, and right directions by applying a regular old rotational transformation. So, it can be helpful to think of the entire conversion in two steps. If you have RH data with +Z up, then step 1 is convert the data to LH (this will at least make them viewable in Unity), then step 2 is to apply a rotation as you would for any other object in Unity so that the data's +Z will be up. Since Unity has the convention that +Y is up, this rotation can just be a simple 90 degree rotation around the X axis. Since +Z=Up is pretty common in a lot of our data, we include some routines for doing this kind of conversion with one function call, but if you look at the implementation, you'll see that it is accomplishing this by first converting RH to LH, then applying a rotation. Commonly Encountered Coordinate Systems and Conventions Left-Handed, Y=Up, Z=Forward (Unity) +X = Right +Y = Up +Z = Forward (Into the screen) Right-Handed, Y=Up, Z=Backward (MinGfx, ParaView, many others ...) +X = Right +Y = Up +Z = Backward (Out of Screen) Right-Handed, Z=Up, Y=Forward (Blender, XROMM, Joint-Track, ...) +X = Right +Y = Forward (Into Screen) +Z = Up Inheritance System.Object CoordConversion Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public class CoordConversion Methods | Improve this Doc View Source FromUnity(Matrix4x4, CoordConversion.CoordSystem) Converts a rigid body transformation matrix defined in Unity's coordinate system convention (left-handed, +Y = Up, +Z = Forward) into some new coordinate system convention. Declaration public static Matrix4x4 FromUnity(Matrix4x4 unityMat, CoordConversion.CoordSystem newCS) Parameters Type Name Description Matrix4x4 unityMat CoordConversion.CoordSystem newCS Returns Type Description Matrix4x4 | Improve this Doc View Source FromUnity(Quaternion, CoordConversion.CoordSystem) Converts a quaternion defined in Unity's coordinate system convention (left-handed, +Y = Up, +Z = Forward) into some new coordinate system convention. Declaration public static Quaternion FromUnity(Quaternion unityQuat, CoordConversion.CoordSystem newCS) Parameters Type Name Description Quaternion unityQuat CoordConversion.CoordSystem newCS Returns Type Description Quaternion | Improve this Doc View Source FromUnity(Vector3, CoordConversion.CoordSystem) Converts a point or vector defined in Unity's coordinate system convention (left-handed, +Y = Up, +Z = Forward) into some new coordinate system convention. Declaration public static Vector3 FromUnity(Vector3 unityVector, CoordConversion.CoordSystem newCS) Parameters Type Name Description Vector3 unityVector CoordConversion.CoordSystem newCS Returns Type Description Vector3 | Improve this Doc View Source GetRotation(Matrix4x4) Utility to convert the rotational component (upper 3x3) of a transformation matrix to a quaternion. Declaration public static Quaternion GetRotation(Matrix4x4 m) Parameters Type Name Description Matrix4x4 m Returns Type Description Quaternion | Improve this Doc View Source GetTranslation(Matrix4x4) Utility to convert the translational component (right column) of a transformation matrix to a vector. Declaration public static Vector3 GetTranslation(Matrix4x4 m) Parameters Type Name Description Matrix4x4 m Returns Type Description Vector3 | Improve this Doc View Source ToUnity(Matrix4x4, CoordConversion.CoordSystem) Converts a rigid body transformation matrix (no scaling) defined according to the provided origCS coordinate system convention into a transformation matrix in Unity's coordinate system convention (left-handed, +Y = Up, +Z = Forward). Declaration public static Matrix4x4 ToUnity(Matrix4x4 origMat, CoordConversion.CoordSystem origCS) Parameters Type Name Description Matrix4x4 origMat CoordConversion.CoordSystem origCS Returns Type Description Matrix4x4 | Improve this Doc View Source ToUnity(Quaternion, CoordConversion.CoordSystem) Converts a quaternion defined according to the provided origCS coordinate system convention into a vector in Unity's coordinate system convention (left-handed, +Y = Up, +Z = Forward). Declaration public static Quaternion ToUnity(Quaternion origQuat, CoordConversion.CoordSystem origCS) Parameters Type Name Description Quaternion origQuat CoordConversion.CoordSystem origCS Returns Type Description Quaternion | Improve this Doc View Source ToUnity(Vector3, CoordConversion.CoordSystem) Converts a point or vector defined according to the provided origCS coordinate system convention into a vector in Unity's coordinate system convention (left-handed, +Y = Up, +Z = Forward). Declaration public static Vector3 ToUnity(Vector3 origVector, CoordConversion.CoordSystem origCS) Parameters Type Name Description Vector3 origVector CoordConversion.CoordSystem origCS Returns Type Description Vector3"
  },
  "api/IVLab.MinVR3.DrawEyes.html": {
    "href": "api/IVLab.MinVR3.DrawEyes.html",
    "title": "Class DrawEyes | MinVR3",
    "keywords": "Class DrawEyes This is useful for debugging displays that use off-axis projection, like the walls of a Cave of a fishtank VR or Powerwall display. The position of each eye (as reported via head tracking) is projected onto the plane of the display and a sphere is drawn for each eye at its projected position. You can then move the glasses around and make sure that these spheres move correctly with them to confirm that you have set offsets from the tracker appropriately (e.g., the offset from the tracking device mounted on the glasses to each eye, making sure the left eye is indeed on the left side, etc.) Inheritance System.Object DrawEyes Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public class DrawEyes : MonoBehaviour Fields | Improve this Doc View Source screen Declaration public TrackedProjectionScreen screen Field Value Type Description TrackedProjectionScreen | Improve this Doc View Source sphereScale Declaration public float sphereScale Field Value Type Description System.Single"
  },
  "api/IVLab.MinVR3.DrawFPS.html": {
    "href": "api/IVLab.MinVR3.DrawFPS.html",
    "title": "Class DrawFPS | MinVR3",
    "keywords": "Class DrawFPS Displays a frames-per-second counter in the top-left of the screen; useful when working with a VR display that doesn't allow you to easily see Unity's performance data while you are wearing it. Inheritance System.Object DrawFPS Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public class DrawFPS : MonoBehaviour Fields | Improve this Doc View Source m_FontSize Declaration public int m_FontSize Field Value Type Description System.Int32 | Improve this Doc View Source m_Position Declaration public Rect m_Position Field Value Type Description Rect | Improve this Doc View Source m_TextColor Declaration public Color m_TextColor Field Value Type Description Color"
  },
  "api/IVLab.MinVR3.DrawTrackers.html": {
    "href": "api/IVLab.MinVR3.DrawTrackers.html",
    "title": "Class DrawTrackers | MinVR3",
    "keywords": "Class DrawTrackers Inheritance System.Object DrawTrackers Implements IVREventListener Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public class DrawTrackers : MonoBehaviour, IVREventListener Fields | Improve this Doc View Source cursorPrefab Declaration public GameObject cursorPrefab Field Value Type Description GameObject | Improve this Doc View Source trackers Declaration public List<DrawTrackers.TrackerDescription> trackers Field Value Type Description System.Collections.Generic.List < DrawTrackers.TrackerDescription > Methods | Improve this Doc View Source IsListening() Declaration public bool IsListening() Returns Type Description System.Boolean | Improve this Doc View Source OnVREvent(VREvent) Declaration public void OnVREvent(VREvent vrEvent) Parameters Type Name Description VREvent vrEvent | Improve this Doc View Source StartListening() Declaration public void StartListening() | Improve this Doc View Source StopListening() Declaration public void StopListening() Implements IVREventListener"
  },
  "api/IVLab.MinVR3.DrawTrackers.TrackerDescription.html": {
    "href": "api/IVLab.MinVR3.DrawTrackers.TrackerDescription.html",
    "title": "Class DrawTrackers.TrackerDescription | MinVR3",
    "keywords": "Class DrawTrackers.TrackerDescription Inheritance System.Object DrawTrackers.TrackerDescription Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax [Serializable] public class TrackerDescription Constructors | Improve this Doc View Source TrackerDescription() Declaration public TrackerDescription() Fields | Improve this Doc View Source displayName Declaration public string displayName Field Value Type Description System.String | Improve this Doc View Source positionEvent Declaration public VREventPrototypeVector3 positionEvent Field Value Type Description VREventPrototypeVector3 | Improve this Doc View Source rotationEvent Declaration public VREventPrototypeQuaternion rotationEvent Field Value Type Description VREventPrototypeQuaternion"
  },
  "api/IVLab.MinVR3.FakeTrackers.html": {
    "href": "api/IVLab.MinVR3.FakeTrackers.html",
    "title": "Class FakeTrackers | MinVR3",
    "keywords": "Class FakeTrackers Inheritance System.Object FakeTrackers Implements IPolledInputDevice IVREventProducer Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public class FakeTrackers : MonoBehaviour, IPolledInputDevice, IVREventProducer Fields | Improve this Doc View Source headTrackerBaseName Declaration public string headTrackerBaseName Field Value Type Description System.String | Improve this Doc View Source initialHeadPos Declaration public Vector3 initialHeadPos Field Value Type Description Vector3 | Improve this Doc View Source initialHeadRot Declaration public Vector3 initialHeadRot Field Value Type Description Vector3 | Improve this Doc View Source initialTracker1Pos Declaration public Vector3 initialTracker1Pos Field Value Type Description Vector3 | Improve this Doc View Source initialTracker1Rot Declaration public Vector3 initialTracker1Rot Field Value Type Description Vector3 | Improve this Doc View Source initialTracker2Pos Declaration public Vector3 initialTracker2Pos Field Value Type Description Vector3 | Improve this Doc View Source initialTracker2Rot Declaration public Vector3 initialTracker2Rot Field Value Type Description Vector3 | Improve this Doc View Source tracker1BaseName Declaration public string tracker1BaseName Field Value Type Description System.String | Improve this Doc View Source tracker2BaseName Declaration public string tracker2BaseName Field Value Type Description System.String Methods | Improve this Doc View Source GetEventPrototypes() Declaration public List<IVREventPrototype> GetEventPrototypes() Returns Type Description System.Collections.Generic.List < IVREventPrototype > | Improve this Doc View Source PollForEvents(ref List<VREvent>) Declaration public void PollForEvents(ref List<VREvent> eventQueue) Parameters Type Name Description System.Collections.Generic.List < VREvent > eventQueue Implements IPolledInputDevice IVREventProducer"
  },
  "api/IVLab.MinVR3.FloatingMenu.html": {
    "href": "api/IVLab.MinVR3.FloatingMenu.html",
    "title": "Class FloatingMenu | MinVR3",
    "keywords": "Class FloatingMenu Simple 3D menu that floats in space and is activated by placing a tracked cursor inside the titlebar or box that holds each menu item and then clicking. Inheritance System.Object FloatingMenu Implements IVREventListener Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public class FloatingMenu : MonoBehaviour, IVREventListener Fields | Improve this Doc View Source buttonDownEvent Declaration public VREventPrototype buttonDownEvent Field Value Type Description VREventPrototype | Improve this Doc View Source buttonUpEvent Declaration public VREventPrototype buttonUpEvent Field Value Type Description VREventPrototype | Improve this Doc View Source cursorPositionEvent Declaration public VREventPrototypeVector3 cursorPositionEvent Field Value Type Description VREventPrototypeVector3 | Improve this Doc View Source cursorRotationEvent Declaration public VREventPrototypeQuaternion cursorRotationEvent Field Value Type Description VREventPrototypeQuaternion | Improve this Doc View Source depth Declaration public float depth Field Value Type Description System.Single | Improve this Doc View Source font Declaration public Font font Field Value Type Description Font | Improve this Doc View Source fontMaterial Declaration public Material fontMaterial Field Value Type Description Material | Improve this Doc View Source inputFocusToken Declaration public SharedToken inputFocusToken Field Value Type Description SharedToken | Improve this Doc View Source itemBGColor Declaration public Color itemBGColor Field Value Type Description Color | Improve this Doc View Source itemColor Declaration public Color itemColor Field Value Type Description Color | Improve this Doc View Source itemHighColor Declaration public Color itemHighColor Field Value Type Description Color | Improve this Doc View Source itemSep Declaration public float itemSep Field Value Type Description System.Single | Improve this Doc View Source menuItems Declaration public List<string> menuItems Field Value Type Description System.Collections.Generic.List < System.String > | Improve this Doc View Source onMenuItemSelected Declaration public VRCallbackInt onMenuItemSelected Field Value Type Description VRCallbackInt | Improve this Doc View Source padding Declaration public Vector2 padding Field Value Type Description Vector2 | Improve this Doc View Source pressColor Declaration public Color pressColor Field Value Type Description Color | Improve this Doc View Source textSizeInWorldUnits Declaration public float textSizeInWorldUnits Field Value Type Description System.Single | Improve this Doc View Source title Declaration public string title Field Value Type Description System.String | Improve this Doc View Source titleBGColor Declaration public Color titleBGColor Field Value Type Description Color | Improve this Doc View Source titleColor Declaration public Color titleColor Field Value Type Description Color | Improve this Doc View Source titleHighColor Declaration public Color titleHighColor Field Value Type Description Color | Improve this Doc View Source zEpsilon Declaration public float zEpsilon Field Value Type Description System.Single Methods | Improve this Doc View Source OnButtonDown() Declaration public void OnButtonDown() | Improve this Doc View Source OnButtonUp() Declaration public void OnButtonUp() | Improve this Doc View Source OnTrackerMove(Vector3) Declaration public void OnTrackerMove(Vector3 pos) Parameters Type Name Description Vector3 pos | Improve this Doc View Source OnTrackerRotate(Quaternion) Declaration public void OnTrackerRotate(Quaternion rot) Parameters Type Name Description Quaternion rot | Improve this Doc View Source OnVREvent(VREvent) Declaration public void OnVREvent(VREvent vrEvent) Parameters Type Name Description VREvent vrEvent | Improve this Doc View Source StartListening() Declaration public void StartListening() | Improve this Doc View Source StopListening() Declaration public void StopListening() | Improve this Doc View Source Update() Declaration public void Update() Implements IVREventListener"
  },
  "api/IVLab.MinVR3.FSM.html": {
    "href": "api/IVLab.MinVR3.FSM.html",
    "title": "Class FSM | MinVR3",
    "keywords": "Class FSM Inheritance System.Object FSM Implements IVREventListener Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public class FSM : MonoBehaviour, IVREventListener Properties | Improve this Doc View Source currentStateID Declaration public int currentStateID { get; } Property Value Type Description System.Int32 | Improve this Doc View Source startStateID Declaration public int startStateID { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source stateNames Declaration public List<string> stateNames { get; } Property Value Type Description System.Collections.Generic.List < System.String > Methods | Improve this Doc View Source AddArc() Declaration public int AddArc() Returns Type Description System.Int32 | Improve this Doc View Source AddArc(Int32, Int32, VREventCallbackAny, SharedToken, SharedToken, Condition) Declaration public int AddArc(int fromStateID, int toStateID, VREventCallbackAny callback, SharedToken requireToTransition = null, SharedToken releaseOnTransition = null, Condition guard = null) Parameters Type Name Description System.Int32 fromStateID System.Int32 toStateID VREventCallbackAny callback SharedToken requireToTransition SharedToken releaseOnTransition Condition guard Returns Type Description System.Int32 | Improve this Doc View Source AddArc(String, String, VREventCallbackAny, SharedToken, SharedToken, Condition) Declaration public int AddArc(string fromState, string toState, VREventCallbackAny callback, SharedToken requireToTransition = null, SharedToken releaseOnTransition = null, Condition guard = null) Parameters Type Name Description System.String fromState System.String toState VREventCallbackAny callback SharedToken requireToTransition SharedToken releaseOnTransition Condition guard Returns Type Description System.Int32 | Improve this Doc View Source AddState(String, VRCallback, VRCallback, VRCallback) Declaration public int AddState(string name, VRCallback onEnterCallback = null, VRCallback onUpdateCallback = null, VRCallback onExitCallback = null) Parameters Type Name Description System.String name VRCallback onEnterCallback VRCallback onUpdateCallback VRCallback onExitCallback Returns Type Description System.Int32 | Improve this Doc View Source ArcToString(Int32) Declaration public string ArcToString(int id) Parameters Type Name Description System.Int32 id Returns Type Description System.String | Improve this Doc View Source GetStateID(String) Declaration public int GetStateID(string name) Parameters Type Name Description System.String name Returns Type Description System.Int32 | Improve this Doc View Source NumArcs() Declaration public int NumArcs() Returns Type Description System.Int32 | Improve this Doc View Source NumStates() Declaration public int NumStates() Returns Type Description System.Int32 | Improve this Doc View Source OnVREvent(VREvent) Declaration public void OnVREvent(VREvent vrEvent) Parameters Type Name Description VREvent vrEvent | Improve this Doc View Source RemoveArc(Int32) Declaration public void RemoveArc(int id) Parameters Type Name Description System.Int32 id | Improve this Doc View Source RemoveState(Int32) Declaration public void RemoveState(int id) Parameters Type Name Description System.Int32 id | Improve this Doc View Source StartListening() Declaration public void StartListening() | Improve this Doc View Source StateExists(String) Declaration public bool StateExists(string name) Parameters Type Name Description System.String name Returns Type Description System.Boolean | Improve this Doc View Source StateToString(Int32) Declaration public string StateToString(int id) Parameters Type Name Description System.Int32 id Returns Type Description System.String | Improve this Doc View Source StopListening() Declaration public void StopListening() Implements IVREventListener"
  },
  "api/IVLab.MinVR3.html": {
    "href": "api/IVLab.MinVR3.html",
    "title": "Namespace IVLab.MinVR3 | MinVR3",
    "keywords": "Namespace IVLab.MinVR3 Classes BasicHighlighter BasicObjectSelector BimanualObjectSelector CallableEventProducer Produces the defined event when the function ProduceEvent() is called. This functions as a null event producer if the function is never called. NOTE: only works with VREvents w/no payload. ClusterClient ClusterServer Condition Conditions can be used to programmatically restrict the FSM's ability to transition along an arc unless some condition is met. Subclass from this class and implement the condition inside this abstract function. Then, attach your new class to the desired arc(s). Then, the arc will only be traversed when it is triggered AND the condition is true. Note that if you want a simple arc guard that does not depend on any custom code this might be better implmented using the SharedToken scriptable object, which is useful, for example, to coordinate between FSMs to determine which should have focus. ConnectionVREventListener MonoBehaviour that takes all MinVR3 events and sends them along this VREventConnection (for example, to a web browser.) ConnectionVREventProducer MonoBehaviour that takes events from a specified VREventConnection and places them in the VR Event Manager's Queue. CoordConversion This class includes useful routines for converting between 3D coordinate systems that follow different conventions for handedness and up/forward directions. Brief background on Left-Handed vs. Right Handed Coordinates Many (most?) scientific datasets and modeling programs these days use right-handed coordinates but that is just a convention. Mathematically speaking, it is just as reasonable to use left- handed coordinates, as Unity has done and several other major graphics packages have done in the past. Luckily, you can convert between LH and RH coordinates. The conversion itself is not too hard. The hard part is that there are several valid ways to do the conversion so you need to know which conventions are used and stay consistent. This class is intended to help with this by organizing all of the conversion routines here in one place. Converting LH to RH: The big question is, which axis to negate? Converting between LH and RH coordinate systems requires negating one axis. However, the choice of which axis to negate is arbitrary. When Unity does these conversions automatically, like when you drag and drop a model file into your Unity project, it seems to have adopted the convention of negating the X axis (i.e., vertices with positive x values will have negative x values after importing). So, in this class, we intentionally follow the same convention of negating X. If you look for more info online, you will find examples that do the conversion by negating Y or Z. All of these are completely valid, it's just a convention, and we'll try to be as consistent with Unity as possible by doing the same thing and negating x. Converting between +Y=Up, +Z=Up, and other variations In addition to deciding to use a left or right-handed system, datasets and graphics toolkits often also adopt a second convention about which axis points \"Up\", which points \"Forward\", etc. This really has nothing to do with RH vs. LH decision. You could decide to use left-handed with +Y=Up or right-handed with +Y=Up or right-handed with +Z=Up or something else. However, once you pick two directions (say, Up and Forward), the third axis must follow either the right -hand rule or left-hand rule based on whether you are using right or left handed coordinates. Use the left or right hand as appropriate, start with your fingers all pointing toward +X, sweep your palm and curl your fingers toward +Y, and then your thumb should point in +Z. (Or, just Google for a picture if needed.) Once you have converted from RH to LH or vice versa you can easily change the up, forward, and right directions by applying a regular old rotational transformation. So, it can be helpful to think of the entire conversion in two steps. If you have RH data with +Z up, then step 1 is convert the data to LH (this will at least make them viewable in Unity), then step 2 is to apply a rotation as you would for any other object in Unity so that the data's +Z will be up. Since Unity has the convention that +Y is up, this rotation can just be a simple 90 degree rotation around the X axis. Since +Z=Up is pretty common in a lot of our data, we include some routines for doing this kind of conversion with one function call, but if you look at the implementation, you'll see that it is accomplishing this by first converting RH to LH, then applying a rotation. Commonly Encountered Coordinate Systems and Conventions Left-Handed, Y=Up, Z=Forward (Unity) +X = Right +Y = Up +Z = Forward (Into the screen) Right-Handed, Y=Up, Z=Backward (MinGfx, ParaView, many others ...) +X = Right +Y = Up +Z = Backward (Out of Screen) Right-Handed, Z=Up, Y=Forward (Blender, XROMM, Joint-Track, ...) +X = Right +Y = Forward (Into Screen) +Z = Up CoordConversion.CoordSystem This small internal class defines a coordinate system convention based on knowing 3 things: Whether right-handed or left-handed coordinates are used. Which direction is considered \"Up\" Which direction is considered \"Forward\" DrawEyes This is useful for debugging displays that use off-axis projection, like the walls of a Cave of a fishtank VR or Powerwall display. The position of each eye (as reported via head tracking) is projected onto the plane of the display and a sphere is drawn for each eye at its projected position. You can then move the glasses around and make sure that these spheres move correctly with them to confirm that you have set offsets from the tracker appropriately (e.g., the offset from the tracking device mounted on the glasses to each eye, making sure the left eye is indeed on the left side, etc.) DrawFPS Displays a frames-per-second counter in the top-left of the screen; useful when working with a VR display that doesn't allow you to easily see Unity's performance data while you are wearing it. DrawTrackers DrawTrackers.TrackerDescription FakeTrackers FloatingMenu Simple 3D menu that floats in space and is activated by placing a tracked cursor inside the titlebar or box that holds each menu item and then clicking. FSM HttpWebSocketVREventConnection WebSocket-based network connection for VREvents. Can be used with a Web Browser. Bundled with a web server that serves a static directory of your choice via HTTP. InputActionsToVREvents A virtual input device that pipes input from Unity's New Input System to MinVR, creating new VREvents when Unity InputActions are performed. Unity's \"New Input System\" is still in a preview state, and it does not currently work for capturing touch input using the Unity Remote App. Use the TouchInput class if you need to do that now while we wait for them to upgrade Unity Remote. KeyboardState Facade to hide the different strategies for accessing keyboard input depending on whether using the Legacy InputModule or the New Input System. MinVRController MinVRControllerDevice MinVRInputLayoutLoader This class automatically registers control layouts used by the MinVRControllerDevice . MobileSensors This script uses the legacy Unity Input Module rather than the \"New Input System\" because the Unity Remote App (used for iOS and Android development) does not yet support the New Input System. It seems that the New Input System works fine if you actually fully deploy the app, but not with Unity Remote, which is super useful for developing mobile apps. So, for now, this uses the Legacy InputModule. When Unity Remote is updated, we should update this script as well so we are consistent with all of MinVR using the New Input System. Note: You can switch which input system you want to use for your app in Player Settings, and it is possible to select \"Both\". That works well if you want to use the New Input System's better support for XR and the Remote's better support for touch, for example. ModifiedEvent Listens for two events: a base event and a modifier event. The modifier event must support some kind of ON/OFF logic (e.g. a keyboard key UP / DOWN). When the modifier is ON, this script will send \"modified\" events as specified by the modified event naming strategy MouseAndKeyboard This class translates mouse and keyboard inputs from Unity to VREvents. It will work with either the new input system or the legacy input system. You can name the VREvents whatever you wish, and this can be a useful way to bind desktop-style input to the same events you expect to recieve when running in VR mode. MouseAndKeyboard.KeyToVREventName MouseState Facade to hide the different strategies for accessing mouse input depending on whether using the Legacy InputModule or the New Input System. NetUtils ProximityEvent Listens for two 3D position events (typically from VR trackers) and generates VREvents for when the two trackers are moved close together (i.e., in proximity to each other) and when they move apart. SimpleEventListener Singleton<T> Inherit from this base class to create a singleton. SmartScene Partial implmentation of the classic bimanual UI in MultiGen's SmartScene application (1997-ish), originally developed for use with pinch gloves. The technique is actually rather similar to modern multi-Cursor gestures but works in 3D to translate, rotate, and scale a scene using two hands in combination. Demo of the original 3DUI: https://www.youtube.com/watch?v=q4XmprH1S0s TouchBuiltin Converts touch events from Unity's built-in touch system to VREvents. TouchSensel TouchTuio TrackballCamera Clickable and draggable camera for trackball camera movement in Unity. Can optionally enable \"acceleration\" to avoid users getting sick in situations like a planetarium. TrackedDesktopCamera Makes a regular desktop camera move about in respone to VREvents so you can control it, for example, from a HMD simulator. TrackedPoseDriver Note: This version of the TrackedPoseDriver is modified from the original provided with Unity's XR Interaction Toolkit. The modified version adds: It listens for VREvents rather than Unity Actions It includes base rotation and translation amounts that can be used, for example, to calibrate a tracker attached to a physical prop. It works with both the new input system and the old input system The TrackedPoseDriver component applies the current Pose value of a tracked device to the transform of the GameObject. TrackedPoseDriver can track multiple types of devices including XR HMDs, controllers, and remotes. TrackedProjectionScreen TrackedProjectionScreen.ScreenCorners UnityXR Uses Unity's XR system to create events for a common VR system with a tracked head and tracked left/right controllers. VRCallback VRCallbackAny VRCallbackFloat VRCallbackGameObject VRCallbackInt VRCallbackQuaternion VRCallbackString VRCallbackT<T> VRCallbackVector2 VRCallbackVector3 VRCallbackVector4 VRConfigSelector VRConvert VREngine VREvent VREventAlias VREventCallback VREventCallbackAny VREventCallbackFloat VREventCallbackGameObject VREventCallbackInt VREventCallbackQuaternion VREventCallbackString VREventCallbackT<T> VREventCallbackVector2 VREventCallbackVector3 VREventCallbackVector4 VREventFloat VREventGameObject VREventInt VREventManager VREventPrototype VREventPrototypeAny VREventPrototypeFloat VREventPrototypeGameObject VREventPrototypeInt VREventPrototypeQuaternion VREventPrototypeString VREventPrototypeT<T> VREventPrototypeVector2 VREventPrototypeVector3 VREventPrototypeVector4 VREventQuaternion VREventString VREventT<T> VREventTypeRepr String representation of a VREvent Type, useful for choosing VREvent producer types with unknown origin VREventVector2 VREventVector3 VREventVector4 WebSocketVREventConnection WebSocket-based network connection for VREvents. Can be used with a Web Browser. WindowSettings WindowUtils XMLUtils zSpace Grabs input from the zSpace using the zCore library and converts head tracking and stylus input to VREvents. The dependency on zSpace's zCore API means this only works in Unity 2019.x for now. Structs MinVRControllerState State for input device representing a simple VR wand or handheld/worn 6-DOF tracking device, like the custom 3D pen devices used in the CAVE. Not as complete (or complex) as Vive/Occulus-style controllers. Interfaces IClusterNode IPolledInputDevice IVRCallback IVREventConnection Event communicator for transferring asynchronous events to/from MinVR over the network. IVREventFilter IVREventListener IVREventProducer IVREventPrototype Enums BasicObjectSelector.SelectionMode CoordConversion.CoordSystem.Axis CoordConversion.CoordSystem.Handedness MinVRControllerButton TrackballCamera.TrackballState TrackedPoseDriver.TrackingType TrackedPoseDriver.UpdateType TrackedProjectionScreen.ProjectionType VREventAlias.AliasStrategy Delegates IVREventConnection.VREventReceivedDelegate Definition for the VREventReceived delegate"
  },
  "api/IVLab.MinVR3.HttpWebSocketVREventConnection.html": {
    "href": "api/IVLab.MinVR3.HttpWebSocketVREventConnection.html",
    "title": "Class HttpWebSocketVREventConnection | MinVR3",
    "keywords": "Class HttpWebSocketVREventConnection WebSocket-based network connection for VREvents. Can be used with a Web Browser. Bundled with a web server that serves a static directory of your choice via HTTP. Inheritance System.Object HttpWebSocketVREventConnection Implements IVREventConnection Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public class HttpWebSocketVREventConnection : MonoBehaviour, IVREventConnection Properties | Improve this Doc View Source Host Declaration public string Host { get; } Property Value Type Description System.String | Improve this Doc View Source OnVREventReceived Declaration public IVREventConnection.VREventReceivedDelegate OnVREventReceived { get; set; } Property Value Type Description IVREventConnection.VREventReceivedDelegate | Improve this Doc View Source Port Declaration public string Port { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Send(in VREvent) Declaration public void Send(in VREvent evt) Parameters Type Name Description VREvent evt Implements IVREventConnection"
  },
  "api/IVLab.MinVR3.IClusterNode.html": {
    "href": "api/IVLab.MinVR3.IClusterNode.html",
    "title": "Interface IClusterNode | MinVR3",
    "keywords": "Interface IClusterNode Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public interface IClusterNode Methods | Improve this Doc View Source Initialize() Declaration void Initialize() | Improve this Doc View Source Shutdown() Declaration void Shutdown() | Improve this Doc View Source SynchronizeInputEventsAcrossAllNodes(ref List<VREvent>) Declaration void SynchronizeInputEventsAcrossAllNodes(ref List<VREvent> inputEvents) Parameters Type Name Description System.Collections.Generic.List < VREvent > inputEvents | Improve this Doc View Source SynchronizeSwapBuffersAcrossAllNodes() Declaration void SynchronizeSwapBuffersAcrossAllNodes()"
  },
  "api/IVLab.MinVR3.InputActionsToVREvents.html": {
    "href": "api/IVLab.MinVR3.InputActionsToVREvents.html",
    "title": "Class InputActionsToVREvents | MinVR3",
    "keywords": "Class InputActionsToVREvents A virtual input device that pipes input from Unity's New Input System to MinVR, creating new VREvents when Unity InputActions are performed. Unity's \"New Input System\" is still in a preview state, and it does not currently work for capturing touch input using the Unity Remote App. Use the TouchInput class if you need to do that now while we wait for them to upgrade Unity Remote. Inheritance System.Object InputActionsToVREvents Implements IVREventProducer Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public class InputActionsToVREvents : MonoBehaviour, IVREventProducer Properties | Improve this Doc View Source inputActionAssets All ActionMaps in these assets are automatically enabled. These serve as the input sources for all MinVR inputs. Declaration public List<InputActionAsset> inputActionAssets { get; set; } Property Value Type Description System.Collections.Generic.List < InputActionAsset > Methods | Improve this Doc View Source DisableUnityInput() Called automatically from MonoBehaviour.OnEnable(); can also call manually together with EnableInput(). Declaration public void DisableUnityInput() | Improve this Doc View Source EnableUnityInput() Called automatically from MonoBehaviour.OnEnable(); can also call manually together with DisableInput(). Declaration public void EnableUnityInput() | Improve this Doc View Source GetEventName(InputAction, InputActionPhase) Declaration public string GetEventName(InputAction action, InputActionPhase phase) Parameters Type Name Description InputAction action InputActionPhase phase Returns Type Description System.String | Improve this Doc View Source GetEventPrototypes() Declaration public List<IVREventPrototype> GetEventPrototypes() Returns Type Description System.Collections.Generic.List < IVREventPrototype > | Improve this Doc View Source OnDisable() Declaration protected void OnDisable() | Improve this Doc View Source OnEnable() Declaration protected void OnEnable() Implements IVREventProducer"
  },
  "api/IVLab.MinVR3.IPolledInputDevice.html": {
    "href": "api/IVLab.MinVR3.IPolledInputDevice.html",
    "title": "Interface IPolledInputDevice | MinVR3",
    "keywords": "Interface IPolledInputDevice Inherited Members IVREventProducer.GetEventPrototypes() Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public interface IPolledInputDevice : IVREventProducer Methods | Improve this Doc View Source PollForEvents(ref List<VREvent>) Calling Poll adds to the queue any input events generated since the last call to poll. Declaration void PollForEvents(ref List<VREvent> eventQueue) Parameters Type Name Description System.Collections.Generic.List < VREvent > eventQueue"
  },
  "api/IVLab.MinVR3.IVRCallback.html": {
    "href": "api/IVLab.MinVR3.IVRCallback.html",
    "title": "Interface IVRCallback | MinVR3",
    "keywords": "Interface IVRCallback Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public interface IVRCallback Methods | Improve this Doc View Source InvokeWithVREvent(VREvent) Declaration void InvokeWithVREvent(VREvent e) Parameters Type Name Description VREvent e"
  },
  "api/IVLab.MinVR3.IVREventConnection.html": {
    "href": "api/IVLab.MinVR3.IVREventConnection.html",
    "title": "Interface IVREventConnection | MinVR3",
    "keywords": "Interface IVREventConnection Event communicator for transferring asynchronous events to/from MinVR over the network. Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public interface IVREventConnection Properties | Improve this Doc View Source OnVREventReceived Delegate that is called whenever a VREvent is received over the network \"connection\" Declaration IVREventConnection.VREventReceivedDelegate OnVREventReceived { get; set; } Property Value Type Description IVREventConnection.VREventReceivedDelegate Methods | Improve this Doc View Source Send(in VREvent) Send a VR event to the other end of this \"connection\" Declaration void Send(in VREvent evt) Parameters Type Name Description VREvent evt"
  },
  "api/IVLab.MinVR3.IVREventConnection.VREventReceivedDelegate.html": {
    "href": "api/IVLab.MinVR3.IVREventConnection.VREventReceivedDelegate.html",
    "title": "Delegate IVREventConnection.VREventReceivedDelegate | MinVR3",
    "keywords": "Delegate IVREventConnection.VREventReceivedDelegate Definition for the VREventReceived delegate Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public delegate void VREventReceivedDelegate(VREvent evt); Parameters Type Name Description VREvent evt"
  },
  "api/IVLab.MinVR3.IVREventFilter.html": {
    "href": "api/IVLab.MinVR3.IVREventFilter.html",
    "title": "Interface IVREventFilter | MinVR3",
    "keywords": "Interface IVREventFilter Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public interface IVREventFilter Methods | Improve this Doc View Source FilterEvent(VREvent, ref List<VREvent>) Each frame, IVREventFilters can process events and optionally modify them before the events are sent to IVREventListeners. The VREventManager passes each event through the active filters just before that event is to be sent out to listeners. A filter can then decide what to do with the event. For example, an EventAlias filter could change the name of the event. A ProximityEvent filter could listen for the position of two trackers and when they are within some threshold, generate a new event in response. A filter could also completely discard the event. the event from view of the IVREventListeners. Declaration bool FilterEvent(VREvent e, ref List<VREvent> filterResult) Parameters Type Name Description VREvent e One event at a time is passed into the filter System.Collections.Generic.List < VREvent > filterResult If the filter modifies the event in some way, this list returns the result of those modifications. This parameter is a list rather than a single event since some filters may create a new event in response to the event and return both the original and the new events. This will essentially \"insert\" a new event in the event queue as it is processed. Returns Type Description System.Boolean true if the filter has modified the event in some way and returned the result in filterResult. false if the event passes through the filter without change."
  },
  "api/IVLab.MinVR3.IVREventListener.html": {
    "href": "api/IVLab.MinVR3.IVREventListener.html",
    "title": "Interface IVREventListener | MinVR3",
    "keywords": "Interface IVREventListener Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public interface IVREventListener Methods | Improve this Doc View Source OnVREvent(VREvent) Declaration void OnVREvent(VREvent vrEvent) Parameters Type Name Description VREvent vrEvent | Improve this Doc View Source StartListening() Declaration void StartListening() | Improve this Doc View Source StopListening() Declaration void StopListening()"
  },
  "api/IVLab.MinVR3.IVREventProducer.html": {
    "href": "api/IVLab.MinVR3.IVREventProducer.html",
    "title": "Interface IVREventProducer | MinVR3",
    "keywords": "Interface IVREventProducer Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public interface IVREventProducer Methods | Improve this Doc View Source GetEventPrototypes() All event producers must implement this function to tell MinVR the names and data types for each possible event that can be produced. Declaration List<IVREventPrototype> GetEventPrototypes() Returns Type Description System.Collections.Generic.List < IVREventPrototype > List of prototypes of events that can be produced at runtime."
  },
  "api/IVLab.MinVR3.IVREventPrototype.html": {
    "href": "api/IVLab.MinVR3.IVREventPrototype.html",
    "title": "Interface IVREventPrototype | MinVR3",
    "keywords": "Interface IVREventPrototype Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public interface IVREventPrototype Methods | Improve this Doc View Source Clone() Declaration IVREventPrototype Clone() Returns Type Description IVREventPrototype | Improve this Doc View Source GetEventDataTypeName() Declaration string GetEventDataTypeName() Returns Type Description System.String | Improve this Doc View Source GetEventDisplayName() Declaration string GetEventDisplayName() Returns Type Description System.String | Improve this Doc View Source GetEventName() Declaration string GetEventName() Returns Type Description System.String | Improve this Doc View Source SetEventName(String) Declaration void SetEventName(string eventName) Parameters Type Name Description System.String eventName"
  },
  "api/IVLab.MinVR3.KeyboardState.html": {
    "href": "api/IVLab.MinVR3.KeyboardState.html",
    "title": "Class KeyboardState | MinVR3",
    "keywords": "Class KeyboardState Facade to hide the different strategies for accessing keyboard input depending on whether using the Legacy InputModule or the New Input System. Inheritance System.Object KeyboardState Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public static class KeyboardState Methods | Improve this Doc View Source KeyIsPressed(KeyCode) Declaration public static bool KeyIsPressed(KeyCode key) Parameters Type Name Description KeyCode key Returns Type Description System.Boolean | Improve this Doc View Source KeyWasPressedThisFrame(KeyCode) Declaration public static bool KeyWasPressedThisFrame(KeyCode key) Parameters Type Name Description KeyCode key Returns Type Description System.Boolean | Improve this Doc View Source KeyWasReleasedThisFrame(KeyCode) Declaration public static bool KeyWasReleasedThisFrame(KeyCode key) Parameters Type Name Description KeyCode key Returns Type Description System.Boolean"
  },
  "api/IVLab.MinVR3.MinVRController.html": {
    "href": "api/IVLab.MinVR3.MinVRController.html",
    "title": "Class MinVRController | MinVR3",
    "keywords": "Class MinVRController Inheritance System.Object MinVRController Implements IVREventListener Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public class MinVRController : MonoBehaviour, IVREventListener Fields | Improve this Doc View Source m_CommonUsages Declaration public string m_CommonUsages Field Value Type Description System.String | Improve this Doc View Source m_DeviceName Declaration public string m_DeviceName Field Value Type Description System.String | Improve this Doc View Source m_PositionEvent Declaration public VREventPrototypeVector3 m_PositionEvent Field Value Type Description VREventPrototypeVector3 | Improve this Doc View Source m_Primary2DAxisEvent Declaration public VREventPrototypeVector2 m_Primary2DAxisEvent Field Value Type Description VREventPrototypeVector2 | Improve this Doc View Source m_PrimaryAxisEvent Declaration public VREventPrototypeFloat m_PrimaryAxisEvent Field Value Type Description VREventPrototypeFloat | Improve this Doc View Source m_PrimaryButtonDownEvent Declaration public VREventPrototype m_PrimaryButtonDownEvent Field Value Type Description VREventPrototype | Improve this Doc View Source m_PrimaryButtonUpEvent Declaration public VREventPrototype m_PrimaryButtonUpEvent Field Value Type Description VREventPrototype | Improve this Doc View Source m_RotationEvent Declaration public VREventPrototypeQuaternion m_RotationEvent Field Value Type Description VREventPrototypeQuaternion | Improve this Doc View Source m_SecondaryButtonDownEvent Declaration public VREventPrototype m_SecondaryButtonDownEvent Field Value Type Description VREventPrototype | Improve this Doc View Source m_SecondaryButtonUpEvent Declaration public VREventPrototype m_SecondaryButtonUpEvent Field Value Type Description VREventPrototype Methods | Improve this Doc View Source Awake() Declaration protected virtual void Awake() | Improve this Doc View Source OnDisable() Declaration protected virtual void OnDisable() | Improve this Doc View Source OnEnable() Declaration protected virtual void OnEnable() | Improve this Doc View Source OnVREvent(VREvent) Declaration public void OnVREvent(VREvent vrEvent) Parameters Type Name Description VREvent vrEvent | Improve this Doc View Source StartListening() Declaration public void StartListening() | Improve this Doc View Source StopListening() Declaration public void StopListening() | Improve this Doc View Source Update() Declaration protected virtual void Update() Implements IVREventListener"
  },
  "api/IVLab.MinVR3.MinVRControllerButton.html": {
    "href": "api/IVLab.MinVR3.MinVRControllerButton.html",
    "title": "Enum MinVRControllerButton | MinVR3",
    "keywords": "Enum MinVRControllerButton Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public enum MinVRControllerButton Fields Name Description PrimaryButton SecondaryButton"
  },
  "api/IVLab.MinVR3.MinVRControllerDevice.html": {
    "href": "api/IVLab.MinVR3.MinVRControllerDevice.html",
    "title": "Class MinVRControllerDevice | MinVR3",
    "keywords": "Class MinVRControllerDevice Inheritance System.Object MinVRControllerDevice Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public class MinVRControllerDevice : UnityEngine.InputSystem.XR.XRController Properties | Improve this Doc View Source primary2DAxis Declaration public Vector2Control primary2DAxis { get; } Property Value Type Description Vector2Control | Improve this Doc View Source primaryAxis Declaration public AxisControl primaryAxis { get; } Property Value Type Description AxisControl | Improve this Doc View Source primaryButton Declaration public ButtonControl primaryButton { get; } Property Value Type Description ButtonControl | Improve this Doc View Source secondaryButton Declaration public ButtonControl secondaryButton { get; } Property Value Type Description ButtonControl Methods | Improve this Doc View Source FinishSetup() Declaration protected override void FinishSetup()"
  },
  "api/IVLab.MinVR3.MinVRControllerState.html": {
    "href": "api/IVLab.MinVR3.MinVRControllerState.html",
    "title": "Struct MinVRControllerState | MinVR3",
    "keywords": "Struct MinVRControllerState State for input device representing a simple VR wand or handheld/worn 6-DOF tracking device, like the custom 3D pen devices used in the CAVE. Not as complete (or complex) as Vive/Occulus-style controllers. Implements IInputStateTypeInfo Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public struct MinVRControllerState Fields | Improve this Doc View Source buttons All the buttons on this device. Declaration public ushort buttons Field Value Type Description System.UInt16 | Improve this Doc View Source devicePosition Declaration public Vector3 devicePosition Field Value Type Description Vector3 | Improve this Doc View Source deviceRotation Declaration public Quaternion deviceRotation Field Value Type Description Quaternion | Improve this Doc View Source primary2DAxis The primary touchpad or joystick on a device. Declaration public Vector2 primary2DAxis Field Value Type Description Vector2 | Improve this Doc View Source primaryAxis A trigger-like control, pressed with the index finger. Declaration public float primaryAxis Field Value Type Description System.Single Properties | Improve this Doc View Source format Declaration public readonly FourCC format { get; } Property Value Type Description FourCC | Improve this Doc View Source formatId Declaration public static readonly FourCC formatId { get; } Property Value Type Description FourCC Methods | Improve this Doc View Source Reset() Resets the value of all fields to default or the identity rotation. Declaration public void Reset() | Improve this Doc View Source WithButton(MinVRControllerButton, Boolean) Set the button mask for the given button . Declaration public MinVRControllerState WithButton(MinVRControllerButton button, bool state = true) Parameters Type Name Description MinVRControllerButton button Button whose state to set. System.Boolean state Whether to set the bit on or off. Returns Type Description MinVRControllerState The same MinVRControllerState with the change applied. See Also buttons Implements IInputStateTypeInfo"
  },
  "api/IVLab.MinVR3.MinVRInputLayoutLoader.html": {
    "href": "api/IVLab.MinVR3.MinVRInputLayoutLoader.html",
    "title": "Class MinVRInputLayoutLoader | MinVR3",
    "keywords": "Class MinVRInputLayoutLoader This class automatically registers control layouts used by the MinVRControllerDevice . Inheritance System.Object MinVRInputLayoutLoader Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public static class MinVRInputLayoutLoader Methods | Improve this Doc View Source Initialize() Declaration public static void Initialize()"
  },
  "api/IVLab.MinVR3.MobileSensors.html": {
    "href": "api/IVLab.MinVR3.MobileSensors.html",
    "title": "Class MobileSensors | MinVR3",
    "keywords": "Class MobileSensors This script uses the legacy Unity Input Module rather than the \"New Input System\" because the Unity Remote App (used for iOS and Android development) does not yet support the New Input System. It seems that the New Input System works fine if you actually fully deploy the app, but not with Unity Remote, which is super useful for developing mobile apps. So, for now, this uses the Legacy InputModule. When Unity Remote is updated, we should update this script as well so we are consistent with all of MinVR using the New Input System. Note: You can switch which input system you want to use for your app in Player Settings, and it is possible to select \"Both\". That works well if you want to use the New Input System's better support for XR and the Remote's better support for touch, for example. Inheritance System.Object MobileSensors Implements IPolledInputDevice IVREventProducer Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public class MobileSensors : MonoBehaviour, IPolledInputDevice, IVREventProducer Fields | Improve this Doc View Source m_AccelerationEventName Declaration public string m_AccelerationEventName Field Value Type Description System.String | Improve this Doc View Source m_CompassHeadingEventName Declaration public string m_CompassHeadingEventName Field Value Type Description System.String | Improve this Doc View Source m_GyroscopeAttitudeEventName Declaration public string m_GyroscopeAttitudeEventName Field Value Type Description System.String Methods | Improve this Doc View Source GetEventPrototypes() Declaration public List<IVREventPrototype> GetEventPrototypes() Returns Type Description System.Collections.Generic.List < IVREventPrototype > | Improve this Doc View Source PollForEvents(ref List<VREvent>) Declaration public void PollForEvents(ref List<VREvent> eventQueue) Parameters Type Name Description System.Collections.Generic.List < VREvent > eventQueue Implements IPolledInputDevice IVREventProducer"
  },
  "api/IVLab.MinVR3.ModifiedEvent.html": {
    "href": "api/IVLab.MinVR3.ModifiedEvent.html",
    "title": "Class ModifiedEvent | MinVR3",
    "keywords": "Class ModifiedEvent Listens for two events: a base event and a modifier event. The modifier event must support some kind of ON/OFF logic (e.g. a keyboard key UP / DOWN). When the modifier is ON, this script will send \"modified\" events as specified by the modified event naming strategy Inheritance System.Object ModifiedEvent Implements IVREventFilter IVREventProducer Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public class ModifiedEvent : MonoBehaviour, IVREventFilter, IVREventProducer Methods | Improve this Doc View Source FilterEvent(VREvent, ref List<VREvent>) Declaration public bool FilterEvent(VREvent e, ref List<VREvent> filterResult) Parameters Type Name Description VREvent e System.Collections.Generic.List < VREvent > filterResult Returns Type Description System.Boolean | Improve this Doc View Source GetEventPrototypes() Declaration public List<IVREventPrototype> GetEventPrototypes() Returns Type Description System.Collections.Generic.List < IVREventPrototype > Implements IVREventFilter IVREventProducer"
  },
  "api/IVLab.MinVR3.MouseAndKeyboard.html": {
    "href": "api/IVLab.MinVR3.MouseAndKeyboard.html",
    "title": "Class MouseAndKeyboard | MinVR3",
    "keywords": "Class MouseAndKeyboard This class translates mouse and keyboard inputs from Unity to VREvents. It will work with either the new input system or the legacy input system. You can name the VREvents whatever you wish, and this can be a useful way to bind desktop-style input to the same events you expect to recieve when running in VR mode. Inheritance System.Object MouseAndKeyboard Implements IPolledInputDevice IVREventProducer Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public class MouseAndKeyboard : MonoBehaviour, IPolledInputDevice, IVREventProducer Methods | Improve this Doc View Source GetEventPrototypes() Declaration public List<IVREventPrototype> GetEventPrototypes() Returns Type Description System.Collections.Generic.List < IVREventPrototype > | Improve this Doc View Source PollForEvents(ref List<VREvent>) Declaration public void PollForEvents(ref List<VREvent> eventQueue) Parameters Type Name Description System.Collections.Generic.List < VREvent > eventQueue Implements IPolledInputDevice IVREventProducer"
  },
  "api/IVLab.MinVR3.MouseAndKeyboard.KeyToVREventName.html": {
    "href": "api/IVLab.MinVR3.MouseAndKeyboard.KeyToVREventName.html",
    "title": "Class MouseAndKeyboard.KeyToVREventName | MinVR3",
    "keywords": "Class MouseAndKeyboard.KeyToVREventName Inheritance System.Object MouseAndKeyboard.KeyToVREventName Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax [Serializable] public class KeyToVREventName Constructors | Improve this Doc View Source KeyToVREventName(KeyCode, String) Declaration public KeyToVREventName(KeyCode keyCode, string baseEventName) Parameters Type Name Description KeyCode keyCode System.String baseEventName Fields | Improve this Doc View Source key Declaration public KeyCode key Field Value Type Description KeyCode | Improve this Doc View Source name Declaration public string name Field Value Type Description System.String"
  },
  "api/IVLab.MinVR3.MouseState.html": {
    "href": "api/IVLab.MinVR3.MouseState.html",
    "title": "Class MouseState | MinVR3",
    "keywords": "Class MouseState Facade to hide the different strategies for accessing mouse input depending on whether using the Legacy InputModule or the New Input System. Inheritance System.Object MouseState Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public static class MouseState Methods | Improve this Doc View Source LeftButtonIsPressed() Declaration public static bool LeftButtonIsPressed() Returns Type Description System.Boolean | Improve this Doc View Source LeftButtonWasPressedThisFrame() Declaration public static bool LeftButtonWasPressedThisFrame() Returns Type Description System.Boolean | Improve this Doc View Source LeftButtonWasReleasedThisFrame() Declaration public static bool LeftButtonWasReleasedThisFrame() Returns Type Description System.Boolean | Improve this Doc View Source MiddleButtonIsPressed() Declaration public static bool MiddleButtonIsPressed() Returns Type Description System.Boolean | Improve this Doc View Source MiddleButtonWasPressedThisFrame() Declaration public static bool MiddleButtonWasPressedThisFrame() Returns Type Description System.Boolean | Improve this Doc View Source MiddleButtonWasReleasedThisFrame() Declaration public static bool MiddleButtonWasReleasedThisFrame() Returns Type Description System.Boolean | Improve this Doc View Source Position() Declaration public static Vector2 Position() Returns Type Description Vector2 | Improve this Doc View Source RightButtonIsPressed() Declaration public static bool RightButtonIsPressed() Returns Type Description System.Boolean | Improve this Doc View Source RightButtonWasPressedThisFrame() Declaration public static bool RightButtonWasPressedThisFrame() Returns Type Description System.Boolean | Improve this Doc View Source RightButtonWasReleasedThisFrame() Declaration public static bool RightButtonWasReleasedThisFrame() Returns Type Description System.Boolean"
  },
  "api/IVLab.MinVR3.NetUtils.html": {
    "href": "api/IVLab.MinVR3.NetUtils.html",
    "title": "Class NetUtils | MinVR3",
    "keywords": "Class NetUtils Inheritance System.Object NetUtils Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public static class NetUtils Fields | Improve this Doc View Source INPUT_EVENTS_MSG Declaration public static readonly byte[] INPUT_EVENTS_MSG Field Value Type Description System.Byte [] | Improve this Doc View Source SWAP_BUFFERS_NOW_MSG Declaration public static readonly byte[] SWAP_BUFFERS_NOW_MSG Field Value Type Description System.Byte [] | Improve this Doc View Source SWAP_BUFFERS_REQUEST_MSG Declaration public static readonly byte[] SWAP_BUFFERS_REQUEST_MSG Field Value Type Description System.Byte [] Methods | Improve this Doc View Source BrokenConnectionError() Declaration public static void BrokenConnectionError() | Improve this Doc View Source ReadInt32(ref TcpClient) Declaration public static int ReadInt32(ref TcpClient client) Parameters Type Name Description TcpClient client Returns Type Description System.Int32 | Improve this Doc View Source ReceiveAll(ref TcpClient, ref Byte[], Int32) Declaration public static int ReceiveAll(ref TcpClient client, ref byte[] buf, int len) Parameters Type Name Description TcpClient client System.Byte [] buf System.Int32 len Returns Type Description System.Int32 | Improve this Doc View Source ReceiveEventData(ref TcpClient, ref List<VREvent>) Declaration public static void ReceiveEventData(ref TcpClient client, ref List<VREvent> inputEvents) Parameters Type Name Description TcpClient client System.Collections.Generic.List < VREvent > inputEvents | Improve this Doc View Source ReceiveOneByteMessage(ref TcpClient, Byte[]) Declaration public static void ReceiveOneByteMessage(ref TcpClient client, byte[] message) Parameters Type Name Description TcpClient client System.Byte [] message | Improve this Doc View Source ReceiveSwapBuffersNow(ref TcpClient) Declaration public static void ReceiveSwapBuffersNow(ref TcpClient client) Parameters Type Name Description TcpClient client | Improve this Doc View Source ReceiveSwapBuffersRequest(ref TcpClient) Declaration public static void ReceiveSwapBuffersRequest(ref TcpClient client) Parameters Type Name Description TcpClient client | Improve this Doc View Source SendEventData(ref TcpClient, in List<VREvent>) Declaration public static void SendEventData(ref TcpClient client, in List<VREvent> inputEvents) Parameters Type Name Description TcpClient client System.Collections.Generic.List < VREvent > inputEvents | Improve this Doc View Source SendOneByteMessage(ref TcpClient, Byte[]) Declaration public static void SendOneByteMessage(ref TcpClient client, byte[] message) Parameters Type Name Description TcpClient client System.Byte [] message | Improve this Doc View Source SendSwapBuffersNow(ref TcpClient) Declaration public static void SendSwapBuffersNow(ref TcpClient client) Parameters Type Name Description TcpClient client | Improve this Doc View Source SendSwapBuffersRequest(ref TcpClient) Declaration public static void SendSwapBuffersRequest(ref TcpClient client) Parameters Type Name Description TcpClient client | Improve this Doc View Source SwapEndianness(Int32) Declaration public static int SwapEndianness(int value) Parameters Type Name Description System.Int32 value Returns Type Description System.Int32 | Improve this Doc View Source WriteInt32(ref TcpClient, Int32) Declaration public static void WriteInt32(ref TcpClient client, int i) Parameters Type Name Description TcpClient client System.Int32 i"
  },
  "api/IVLab.MinVR3.ProximityEvent.html": {
    "href": "api/IVLab.MinVR3.ProximityEvent.html",
    "title": "Class ProximityEvent | MinVR3",
    "keywords": "Class ProximityEvent Listens for two 3D position events (typically from VR trackers) and generates VREvents for when the two trackers are moved close together (i.e., in proximity to each other) and when they move apart. Inheritance System.Object ProximityEvent Implements IVREventListener IVREventProducer Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public class ProximityEvent : MonoBehaviour, IVREventListener, IVREventProducer Methods | Improve this Doc View Source GetEventPrototypes() Declaration public List<IVREventPrototype> GetEventPrototypes() Returns Type Description System.Collections.Generic.List < IVREventPrototype > | Improve this Doc View Source OnVREvent(VREvent) Declaration public void OnVREvent(VREvent e) Parameters Type Name Description VREvent e | Improve this Doc View Source StartListening() Declaration public void StartListening() | Improve this Doc View Source StopListening() Declaration public void StopListening() Implements IVREventListener IVREventProducer"
  },
  "api/IVLab.MinVR3.SimpleEventListener.html": {
    "href": "api/IVLab.MinVR3.SimpleEventListener.html",
    "title": "Class SimpleEventListener | MinVR3",
    "keywords": "Class SimpleEventListener Inheritance System.Object SimpleEventListener Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public class SimpleEventListener : MonoBehaviour Properties | Improve this Doc View Source onVREvent Declaration public VREventCallbackAny onVREvent { get; set; } Property Value Type Description VREventCallbackAny"
  },
  "api/IVLab.MinVR3.Singleton-1.html": {
    "href": "api/IVLab.MinVR3.Singleton-1.html",
    "title": "Class Singleton<T> | MinVR3",
    "keywords": "Class Singleton<T> Inherit from this base class to create a singleton. Inheritance System.Object Singleton<T> VREngine Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public class Singleton<T> : MonoBehaviour where T : MonoBehaviour Type Parameters Name Description T Examples public class MyClassName : Singleton<MyClassName> { } // MyClassName will now be a \"Singleton\" and can be accessed via .Instance or .GetInstance() public class Testing : MonoBehaviour { void Start() { Debug.Log(MyClassName.Instance.GetHashCode()); } } Properties | Improve this Doc View Source Instance Access singleton instance through this propriety. Declaration public static T Instance { get; } Property Value Type Description T Methods | Improve this Doc View Source Awake() Declaration protected virtual void Awake() | Improve this Doc View Source GetInstance() Declaration public static T GetInstance() Returns Type Description T"
  },
  "api/IVLab.MinVR3.SmartScene.html": {
    "href": "api/IVLab.MinVR3.SmartScene.html",
    "title": "Class SmartScene | MinVR3",
    "keywords": "Class SmartScene Partial implmentation of the classic bimanual UI in MultiGen's SmartScene application (1997-ish), originally developed for use with pinch gloves. The technique is actually rather similar to modern multi-Cursor gestures but works in 3D to translate, rotate, and scale a scene using two hands in combination. Demo of the original 3DUI: https://www.youtube.com/watch?v=q4XmprH1S0s Inheritance System.Object SmartScene Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public class SmartScene : MonoBehaviour Methods | Improve this Doc View Source Awake() Declaration public void Awake() | Improve this Doc View Source InitManipulation() Declaration public void InitManipulation() | Improve this Doc View Source OneHandMove(Int32, Vector3) Declaration public void OneHandMove(int cursorID, Vector3 pos) Parameters Type Name Description System.Int32 cursorID Vector3 pos | Improve this Doc View Source Reset() Declaration public void Reset() | Improve this Doc View Source RoomToWorld(Vector3) Declaration public Vector3 RoomToWorld(Vector3 roomPoint) Parameters Type Name Description Vector3 roomPoint Returns Type Description Vector3 | Improve this Doc View Source TwoHandMove(Int32, Vector3) Declaration public void TwoHandMove(int cursorID, Vector3 pos) Parameters Type Name Description System.Int32 cursorID Vector3 pos | Improve this Doc View Source WorldToLocal(Vector3, Transform) Declaration public Vector3 WorldToLocal(Vector3 worldPoint, Transform localFrame) Parameters Type Name Description Vector3 worldPoint Transform localFrame Returns Type Description Vector3"
  },
  "api/IVLab.MinVR3.TouchBuiltin.html": {
    "href": "api/IVLab.MinVR3.TouchBuiltin.html",
    "title": "Class TouchBuiltin | MinVR3",
    "keywords": "Class TouchBuiltin Converts touch events from Unity's built-in touch system to VREvents. Inheritance System.Object TouchBuiltin Implements IPolledInputDevice IVREventProducer Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public class TouchBuiltin : MonoBehaviour, IPolledInputDevice, IVREventProducer Fields | Improve this Doc View Source m_BaseEventNames Declaration public string[] m_BaseEventNames Field Value Type Description System.String [] | Improve this Doc View Source m_ForceLegacyInput Declaration public bool m_ForceLegacyInput Field Value Type Description System.Boolean | Improve this Doc View Source m_IncludePressureEvents Declaration public bool m_IncludePressureEvents Field Value Type Description System.Boolean Methods | Improve this Doc View Source GetEventPrototypes() Declaration public List<IVREventPrototype> GetEventPrototypes() Returns Type Description System.Collections.Generic.List < IVREventPrototype > | Improve this Doc View Source PollForEvents(ref List<VREvent>) Declaration public void PollForEvents(ref List<VREvent> eventQueue) Parameters Type Name Description System.Collections.Generic.List < VREvent > eventQueue Implements IPolledInputDevice IVREventProducer"
  },
  "api/IVLab.MinVR3.TouchSensel.html": {
    "href": "api/IVLab.MinVR3.TouchSensel.html",
    "title": "Class TouchSensel | MinVR3",
    "keywords": "Class TouchSensel Inheritance System.Object TouchSensel Implements IVREventProducer Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public class TouchSensel : MonoBehaviour, IVREventProducer Fields | Improve this Doc View Source m_BaseEventNames Declaration public string[] m_BaseEventNames Field Value Type Description System.String [] Methods | Improve this Doc View Source GetEventPrototypes() Declaration public List<IVREventPrototype> GetEventPrototypes() Returns Type Description System.Collections.Generic.List < IVREventPrototype > Implements IVREventProducer"
  },
  "api/IVLab.MinVR3.TouchTuio.html": {
    "href": "api/IVLab.MinVR3.TouchTuio.html",
    "title": "Class TouchTuio | MinVR3",
    "keywords": "Class TouchTuio Inheritance System.Object TouchTuio Implements IVREventProducer TuioListener Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public class TouchTuio : MonoBehaviour, IVREventProducer Fields | Improve this Doc View Source m_BaseEventNames Declaration public string[] m_BaseEventNames Field Value Type Description System.String [] Methods | Improve this Doc View Source addTuioBlob(TuioBlob) Declaration public void addTuioBlob(TuioBlob tblb) Parameters Type Name Description TuioBlob tblb | Improve this Doc View Source addTuioCursor(TuioCursor) Declaration public void addTuioCursor(TuioCursor tcur) Parameters Type Name Description TuioCursor tcur | Improve this Doc View Source addTuioObject(TuioObject) Declaration public void addTuioObject(TuioObject tobj) Parameters Type Name Description TuioObject tobj | Improve this Doc View Source GetEventPrototypes() Declaration public List<IVREventPrototype> GetEventPrototypes() Returns Type Description System.Collections.Generic.List < IVREventPrototype > | Improve this Doc View Source refresh(TuioTime) Declaration public void refresh(TuioTime frameTime) Parameters Type Name Description TuioTime frameTime | Improve this Doc View Source removeTuioBlob(TuioBlob) Declaration public void removeTuioBlob(TuioBlob tblb) Parameters Type Name Description TuioBlob tblb | Improve this Doc View Source removeTuioCursor(TuioCursor) Declaration public void removeTuioCursor(TuioCursor tcur) Parameters Type Name Description TuioCursor tcur | Improve this Doc View Source removeTuioObject(TuioObject) Declaration public void removeTuioObject(TuioObject tobj) Parameters Type Name Description TuioObject tobj | Improve this Doc View Source updateTuioBlob(TuioBlob) Declaration public void updateTuioBlob(TuioBlob tblb) Parameters Type Name Description TuioBlob tblb | Improve this Doc View Source updateTuioCursor(TuioCursor) Declaration public void updateTuioCursor(TuioCursor tcur) Parameters Type Name Description TuioCursor tcur | Improve this Doc View Source updateTuioObject(TuioObject) Declaration public void updateTuioObject(TuioObject tobj) Parameters Type Name Description TuioObject tobj Implements IVREventProducer TuioListener"
  },
  "api/IVLab.MinVR3.TrackballCamera.html": {
    "href": "api/IVLab.MinVR3.TrackballCamera.html",
    "title": "Class TrackballCamera | MinVR3",
    "keywords": "Class TrackballCamera Clickable and draggable camera for trackball camera movement in Unity. Can optionally enable \"acceleration\" to avoid users getting sick in situations like a planetarium. Inheritance System.Object TrackballCamera Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public class TrackballCamera : MonoBehaviour Methods | Improve this Doc View Source OnMovement(TrackballCamera.TrackballState, Vector2) Declaration public void OnMovement(TrackballCamera.TrackballState movement, Vector2 mousePosition) Parameters Type Name Description TrackballCamera.TrackballState movement Vector2 mousePosition | Improve this Doc View Source OnMovementEnd(TrackballCamera.TrackballState) Declaration public void OnMovementEnd(TrackballCamera.TrackballState mvmt) Parameters Type Name Description TrackballCamera.TrackballState mvmt | Improve this Doc View Source OnMovementStart(TrackballCamera.TrackballState) Declaration public void OnMovementStart(TrackballCamera.TrackballState mvmt) Parameters Type Name Description TrackballCamera.TrackballState mvmt"
  },
  "api/IVLab.MinVR3.TrackballCamera.TrackballState.html": {
    "href": "api/IVLab.MinVR3.TrackballCamera.TrackballState.html",
    "title": "Enum TrackballCamera.TrackballState | MinVR3",
    "keywords": "Enum TrackballCamera.TrackballState Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public enum TrackballState Fields Name Description Orbit Pan Rotate Truck"
  },
  "api/IVLab.MinVR3.TrackedDesktopCamera.html": {
    "href": "api/IVLab.MinVR3.TrackedDesktopCamera.html",
    "title": "Class TrackedDesktopCamera | MinVR3",
    "keywords": "Class TrackedDesktopCamera Makes a regular desktop camera move about in respone to VREvents so you can control it, for example, from a HMD simulator. Inheritance System.Object TrackedDesktopCamera Implements IVREventListener Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public class TrackedDesktopCamera : MonoBehaviour, IVREventListener Fields | Improve this Doc View Source m_Camera Declaration public Camera m_Camera Field Value Type Description Camera | Improve this Doc View Source m_PositionEvent Declaration public VREventPrototypeVector3 m_PositionEvent Field Value Type Description VREventPrototypeVector3 | Improve this Doc View Source m_RotationEvent Declaration public VREventPrototypeQuaternion m_RotationEvent Field Value Type Description VREventPrototypeQuaternion Methods | Improve this Doc View Source IsListening() Declaration public bool IsListening() Returns Type Description System.Boolean | Improve this Doc View Source OnVREvent(VREvent) Declaration public void OnVREvent(VREvent vrEvent) Parameters Type Name Description VREvent vrEvent | Improve this Doc View Source StartListening() Declaration public void StartListening() | Improve this Doc View Source StopListening() Declaration public void StopListening() Implements IVREventListener"
  },
  "api/IVLab.MinVR3.TrackedPoseDriver.html": {
    "href": "api/IVLab.MinVR3.TrackedPoseDriver.html",
    "title": "Class TrackedPoseDriver | MinVR3",
    "keywords": "Class TrackedPoseDriver Note: This version of the TrackedPoseDriver is modified from the original provided with Unity's XR Interaction Toolkit. The modified version adds: It listens for VREvents rather than Unity Actions It includes base rotation and translation amounts that can be used, for example, to calibrate a tracker attached to a physical prop. It works with both the new input system and the old input system The TrackedPoseDriver component applies the current Pose value of a tracked device to the transform of the GameObject. TrackedPoseDriver can track multiple types of devices including XR HMDs, controllers, and remotes. Inheritance System.Object TrackedPoseDriver Implements IVREventListener Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public class TrackedPoseDriver : MonoBehaviour, IVREventListener Properties | Improve this Doc View Source calibrationRotation Declaration public Quaternion calibrationRotation { get; set; } Property Value Type Description Quaternion | Improve this Doc View Source calibrationTranslation Declaration public Vector3 calibrationTranslation { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source positionEvent Declaration public VREventPrototypeVector3 positionEvent { get; set; } Property Value Type Description VREventPrototypeVector3 | Improve this Doc View Source rotationEvent Declaration public VREventPrototypeQuaternion rotationEvent { get; set; } Property Value Type Description VREventPrototypeQuaternion | Improve this Doc View Source trackingType The tracking type being used by the tracked pose driver Declaration public TrackedPoseDriver.TrackingType trackingType { get; set; } Property Value Type Description TrackedPoseDriver.TrackingType | Improve this Doc View Source updateType The update type being used by the tracked pose driver Declaration public TrackedPoseDriver.UpdateType updateType { get; set; } Property Value Type Description TrackedPoseDriver.UpdateType Methods | Improve this Doc View Source Awake() Declaration protected virtual void Awake() | Improve this Doc View Source LateUpdate() Declaration protected void LateUpdate() | Improve this Doc View Source OnBeforeRender() Declaration protected virtual void OnBeforeRender() | Improve this Doc View Source OnDestroy() Declaration protected virtual void OnDestroy() | Improve this Doc View Source OnEnable() Declaration protected void OnEnable() | Improve this Doc View Source OnUpdate() Declaration protected virtual void OnUpdate() | Improve this Doc View Source OnVREvent(VREvent) Declaration public void OnVREvent(VREvent vrEvent) Parameters Type Name Description VREvent vrEvent | Improve this Doc View Source PerformUpdate() Declaration protected virtual void PerformUpdate() | Improve this Doc View Source SetLocalTransform(Vector3, Quaternion) Declaration protected virtual void SetLocalTransform(Vector3 newPosition, Quaternion newRotation) Parameters Type Name Description Vector3 newPosition Quaternion newRotation | Improve this Doc View Source StartListening() Declaration public void StartListening() | Improve this Doc View Source StopListening() Declaration public void StopListening() | Improve this Doc View Source Update() Declaration protected void Update() Implements IVREventListener"
  },
  "api/IVLab.MinVR3.TrackedPoseDriver.TrackingType.html": {
    "href": "api/IVLab.MinVR3.TrackedPoseDriver.TrackingType.html",
    "title": "Enum TrackedPoseDriver.TrackingType | MinVR3",
    "keywords": "Enum TrackedPoseDriver.TrackingType Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public enum TrackingType Fields Name Description PositionOnly RotationAndPosition RotationOnly"
  },
  "api/IVLab.MinVR3.TrackedPoseDriver.UpdateType.html": {
    "href": "api/IVLab.MinVR3.TrackedPoseDriver.UpdateType.html",
    "title": "Enum TrackedPoseDriver.UpdateType | MinVR3",
    "keywords": "Enum TrackedPoseDriver.UpdateType Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public enum UpdateType Fields Name Description BeforeRender Update UpdateAndBeforeRender"
  },
  "api/IVLab.MinVR3.TrackedProjectionScreen.html": {
    "href": "api/IVLab.MinVR3.TrackedProjectionScreen.html",
    "title": "Class TrackedProjectionScreen | MinVR3",
    "keywords": "Class TrackedProjectionScreen Inheritance System.Object TrackedProjectionScreen Implements IVREventListener Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public class TrackedProjectionScreen : MonoBehaviour, IVREventListener Fields | Improve this Doc View Source cam Declaration public Camera cam Field Value Type Description Camera | Improve this Doc View Source debugColor Declaration public Color debugColor Field Value Type Description Color | Improve this Doc View Source headTrackingPosEvent Declaration public VREventPrototypeVector3 headTrackingPosEvent Field Value Type Description VREventPrototypeVector3 | Improve this Doc View Source headTrackingRotEvent Declaration public VREventPrototypeQuaternion headTrackingRotEvent Field Value Type Description VREventPrototypeQuaternion | Improve this Doc View Source projectionType Declaration public TrackedProjectionScreen.ProjectionType projectionType Field Value Type Description TrackedProjectionScreen.ProjectionType | Improve this Doc View Source trackingSpaceCorners Declaration public TrackedProjectionScreen.ScreenCorners trackingSpaceCorners Field Value Type Description TrackedProjectionScreen.ScreenCorners Methods | Improve this Doc View Source GetBottomLeftCorner() Declaration public Vector3 GetBottomLeftCorner() Returns Type Description Vector3 | Improve this Doc View Source GetBottomRightCorner() Declaration public Vector3 GetBottomRightCorner() Returns Type Description Vector3 | Improve this Doc View Source GetLeftEyePosition() Declaration public Vector3 GetLeftEyePosition() Returns Type Description Vector3 | Improve this Doc View Source GetRightEyePosition() Declaration public Vector3 GetRightEyePosition() Returns Type Description Vector3 | Improve this Doc View Source GetTopLeftCorner() Declaration public Vector3 GetTopLeftCorner() Returns Type Description Vector3 | Improve this Doc View Source GetTopRightCorner() Declaration public Vector3 GetTopRightCorner() Returns Type Description Vector3 | Improve this Doc View Source IsListening() Declaration public bool IsListening() Returns Type Description System.Boolean | Improve this Doc View Source OnVREvent(VREvent) Declaration public void OnVREvent(VREvent vrEvent) Parameters Type Name Description VREvent vrEvent | Improve this Doc View Source StartListening() Declaration public void StartListening() | Improve this Doc View Source StopListening() Declaration public void StopListening() Implements IVREventListener"
  },
  "api/IVLab.MinVR3.TrackedProjectionScreen.ProjectionType.html": {
    "href": "api/IVLab.MinVR3.TrackedProjectionScreen.ProjectionType.html",
    "title": "Enum TrackedProjectionScreen.ProjectionType | MinVR3",
    "keywords": "Enum TrackedProjectionScreen.ProjectionType Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public enum ProjectionType Fields Name Description Parallel Perspective"
  },
  "api/IVLab.MinVR3.TrackedProjectionScreen.ScreenCorners.html": {
    "href": "api/IVLab.MinVR3.TrackedProjectionScreen.ScreenCorners.html",
    "title": "Class TrackedProjectionScreen.ScreenCorners | MinVR3",
    "keywords": "Class TrackedProjectionScreen.ScreenCorners Inheritance System.Object TrackedProjectionScreen.ScreenCorners Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax [Serializable] public class ScreenCorners Fields | Improve this Doc View Source bottomLeft Declaration public Vector3 bottomLeft Field Value Type Description Vector3 | Improve this Doc View Source bottomRight Declaration public Vector3 bottomRight Field Value Type Description Vector3 | Improve this Doc View Source topLeft Declaration public Vector3 topLeft Field Value Type Description Vector3 | Improve this Doc View Source topRight Declaration public Vector3 topRight Field Value Type Description Vector3"
  },
  "api/IVLab.MinVR3.UnityXR.html": {
    "href": "api/IVLab.MinVR3.UnityXR.html",
    "title": "Class UnityXR | MinVR3",
    "keywords": "Class UnityXR Uses Unity's XR system to create events for a common VR system with a tracked head and tracked left/right controllers. Inheritance System.Object UnityXR Implements IPolledInputDevice IVREventProducer Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public class UnityXR : MonoBehaviour, IPolledInputDevice, IVREventProducer Methods | Improve this Doc View Source GetEventPrototypes() Declaration public List<IVREventPrototype> GetEventPrototypes() Returns Type Description System.Collections.Generic.List < IVREventPrototype > | Improve this Doc View Source OnDisable() Declaration protected void OnDisable() | Improve this Doc View Source OnEnable() Declaration protected void OnEnable() | Improve this Doc View Source PollForEvents(ref List<VREvent>) Declaration public void PollForEvents(ref List<VREvent> eventQueue) Parameters Type Name Description System.Collections.Generic.List < VREvent > eventQueue Implements IPolledInputDevice IVREventProducer"
  },
  "api/IVLab.MinVR3.VRCallback.html": {
    "href": "api/IVLab.MinVR3.VRCallback.html",
    "title": "Class VRCallback | MinVR3",
    "keywords": "Class VRCallback Inheritance System.Object VRCallback Implements IVRCallback Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax [Serializable] public class VRCallback : UnityEvent, IVRCallback Constructors | Improve this Doc View Source VRCallback() Declaration public VRCallback() Methods | Improve this Doc View Source AddRuntimeListener(UnityAction) For callbacks created while your program is running (i.e., from within Start(), Update(), etc.). Note that callbacks added this way will not show up in the inspector -- that is a limitation/feature of the UnityEvent* classes upon which this implmementation is based. Declaration public void AddRuntimeListener(UnityAction listener) Parameters Type Name Description UnityAction listener | Improve this Doc View Source CreateRuntime(UnityAction) Declaration public static VRCallback CreateRuntime(UnityAction callbackFunc) Parameters Type Name Description UnityAction callbackFunc Returns Type Description VRCallback | Improve this Doc View Source InvokeWithVREvent(VREvent) Declaration public void InvokeWithVREvent(VREvent e) Parameters Type Name Description VREvent e | Improve this Doc View Source RemoveRuntimeListener(UnityAction) Declaration public void RemoveRuntimeListener(UnityAction listener) Parameters Type Name Description UnityAction listener Implements IVRCallback"
  },
  "api/IVLab.MinVR3.VRCallbackAny.html": {
    "href": "api/IVLab.MinVR3.VRCallbackAny.html",
    "title": "Class VRCallbackAny | MinVR3",
    "keywords": "Class VRCallbackAny Inheritance System.Object VRCallbackAny Implements IVRCallback Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax [Serializable] public class VRCallbackAny : IVRCallback Constructors | Improve this Doc View Source VRCallbackAny() Declaration public VRCallbackAny() Methods | Improve this Doc View Source AddRuntimeListener(UnityAction) For callbacks created while your program is running (i.e., from within Start(), Update(), etc.). Note that callbacks added this way will not show up in the inspector -- that is a limitation/feature of the UnityEvent* classes upon which this implmementation is based. Declaration public void AddRuntimeListener(UnityAction listener) Parameters Type Name Description UnityAction listener | Improve this Doc View Source AddRuntimeListener<T>(UnityAction<T>) Declaration public void AddRuntimeListener<T>(UnityAction<T> listener) Parameters Type Name Description UnityAction <T> listener Type Parameters Name Description T | Improve this Doc View Source CreateRuntime(UnityAction) Declaration public static VRCallbackAny CreateRuntime(UnityAction callbackFunc) Parameters Type Name Description UnityAction callbackFunc Returns Type Description VRCallbackAny | Improve this Doc View Source CreateRuntime<T>(UnityAction<T>) Declaration public static VRCallbackAny CreateRuntime<T>(UnityAction<T> callbackFunc) Parameters Type Name Description UnityAction <T> callbackFunc Returns Type Description VRCallbackAny Type Parameters Name Description T | Improve this Doc View Source InitAllCallbacks() Declaration public void InitAllCallbacks() | Improve this Doc View Source InvokeWithVREvent(VREvent) Declaration public void InvokeWithVREvent(VREvent e) Parameters Type Name Description VREvent e | Improve this Doc View Source RemoveRuntimeListener(UnityAction) Declaration public void RemoveRuntimeListener(UnityAction listener) Parameters Type Name Description UnityAction listener | Improve this Doc View Source RemoveRuntimeListener<T>(UnityAction<T>) Declaration public void RemoveRuntimeListener<T>(UnityAction<T> listener) Parameters Type Name Description UnityAction <T> listener Type Parameters Name Description T | Improve this Doc View Source SetEventDataType(String) Declaration public void SetEventDataType(string eventDataTypeName) Parameters Type Name Description System.String eventDataTypeName | Improve this Doc View Source SetEventDataType(Type) Declaration public void SetEventDataType(Type eventDataType) Parameters Type Name Description System.Type eventDataType | Improve this Doc View Source SetShowDataTypeInEditor(Boolean) Declaration public void SetShowDataTypeInEditor(bool show) Parameters Type Name Description System.Boolean show | Improve this Doc View Source SupportsDataType(String) Declaration public bool SupportsDataType(string dataTypeName) Parameters Type Name Description System.String dataTypeName Returns Type Description System.Boolean | Improve this Doc View Source SupportsDataType(Type) Declaration public bool SupportsDataType(Type dataType) Parameters Type Name Description System.Type dataType Returns Type Description System.Boolean Implements IVRCallback"
  },
  "api/IVLab.MinVR3.VRCallbackFloat.html": {
    "href": "api/IVLab.MinVR3.VRCallbackFloat.html",
    "title": "Class VRCallbackFloat | MinVR3",
    "keywords": "Class VRCallbackFloat Inheritance System.Object VRCallbackT < System.Single > VRCallbackFloat Implements IVRCallback Inherited Members VRCallbackT<Single>.AddRuntimeListener(UnityAction<Single>) VRCallbackT<Single>.RemoveRuntimeListener(UnityAction<Single>) VRCallbackT<Single>.InvokeWithVREvent(VREvent) Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax [Serializable] public class VRCallbackFloat : VRCallbackT<float>, IVRCallback Methods | Improve this Doc View Source CreateRuntime(UnityAction<Single>) Declaration public static VRCallbackFloat CreateRuntime(UnityAction<float> callbackFunc) Parameters Type Name Description UnityAction < System.Single > callbackFunc Returns Type Description VRCallbackFloat Implements IVRCallback"
  },
  "api/IVLab.MinVR3.VRCallbackGameObject.html": {
    "href": "api/IVLab.MinVR3.VRCallbackGameObject.html",
    "title": "Class VRCallbackGameObject | MinVR3",
    "keywords": "Class VRCallbackGameObject Inheritance System.Object VRCallbackT < GameObject > VRCallbackGameObject Implements IVRCallback Inherited Members VRCallbackT<GameObject>.AddRuntimeListener(UnityAction<GameObject>) VRCallbackT<GameObject>.RemoveRuntimeListener(UnityAction<GameObject>) VRCallbackT<GameObject>.InvokeWithVREvent(VREvent) Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax [Serializable] public class VRCallbackGameObject : VRCallbackT<GameObject>, IVRCallback Methods | Improve this Doc View Source CreateInEditor(UnityAction<GameObject>) Declaration public static VRCallbackGameObject CreateInEditor(UnityAction<GameObject> callbackFunc) Parameters Type Name Description UnityAction < GameObject > callbackFunc Returns Type Description VRCallbackGameObject | Improve this Doc View Source CreateRuntime(UnityAction<GameObject>) Declaration public static VRCallbackGameObject CreateRuntime(UnityAction<GameObject> callbackFunc) Parameters Type Name Description UnityAction < GameObject > callbackFunc Returns Type Description VRCallbackGameObject Implements IVRCallback"
  },
  "api/IVLab.MinVR3.VRCallbackInt.html": {
    "href": "api/IVLab.MinVR3.VRCallbackInt.html",
    "title": "Class VRCallbackInt | MinVR3",
    "keywords": "Class VRCallbackInt Inheritance System.Object VRCallbackT < System.Int32 > VRCallbackInt Implements IVRCallback Inherited Members VRCallbackT<Int32>.AddRuntimeListener(UnityAction<Int32>) VRCallbackT<Int32>.RemoveRuntimeListener(UnityAction<Int32>) VRCallbackT<Int32>.InvokeWithVREvent(VREvent) Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax [Serializable] public class VRCallbackInt : VRCallbackT<int>, IVRCallback Methods | Improve this Doc View Source CreateRuntime(UnityAction<Int32>) Declaration public static VRCallbackInt CreateRuntime(UnityAction<int> callbackFunc) Parameters Type Name Description UnityAction < System.Int32 > callbackFunc Returns Type Description VRCallbackInt Implements IVRCallback"
  },
  "api/IVLab.MinVR3.VRCallbackQuaternion.html": {
    "href": "api/IVLab.MinVR3.VRCallbackQuaternion.html",
    "title": "Class VRCallbackQuaternion | MinVR3",
    "keywords": "Class VRCallbackQuaternion Inheritance System.Object VRCallbackT < Quaternion > VRCallbackQuaternion Implements IVRCallback Inherited Members VRCallbackT<Quaternion>.AddRuntimeListener(UnityAction<Quaternion>) VRCallbackT<Quaternion>.RemoveRuntimeListener(UnityAction<Quaternion>) VRCallbackT<Quaternion>.InvokeWithVREvent(VREvent) Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax [Serializable] public class VRCallbackQuaternion : VRCallbackT<Quaternion>, IVRCallback Methods | Improve this Doc View Source CreateRuntime(UnityAction<Quaternion>) Declaration public static VRCallbackQuaternion CreateRuntime(UnityAction<Quaternion> callbackFunc) Parameters Type Name Description UnityAction < Quaternion > callbackFunc Returns Type Description VRCallbackQuaternion Implements IVRCallback"
  },
  "api/IVLab.MinVR3.VRCallbackString.html": {
    "href": "api/IVLab.MinVR3.VRCallbackString.html",
    "title": "Class VRCallbackString | MinVR3",
    "keywords": "Class VRCallbackString Inheritance System.Object VRCallbackT < System.String > VRCallbackString Implements IVRCallback Inherited Members VRCallbackT<String>.AddRuntimeListener(UnityAction<String>) VRCallbackT<String>.RemoveRuntimeListener(UnityAction<String>) VRCallbackT<String>.InvokeWithVREvent(VREvent) Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax [Serializable] public class VRCallbackString : VRCallbackT<string>, IVRCallback Methods | Improve this Doc View Source CreateRuntime(UnityAction<String>) Declaration public static VRCallbackString CreateRuntime(UnityAction<string> callbackFunc) Parameters Type Name Description UnityAction < System.String > callbackFunc Returns Type Description VRCallbackString Implements IVRCallback"
  },
  "api/IVLab.MinVR3.VRCallbackT-1.html": {
    "href": "api/IVLab.MinVR3.VRCallbackT-1.html",
    "title": "Class VRCallbackT<T> | MinVR3",
    "keywords": "Class VRCallbackT<T> Inheritance System.Object VRCallbackT<T> VRCallbackFloat VRCallbackGameObject VRCallbackInt VRCallbackQuaternion VRCallbackString VRCallbackVector2 VRCallbackVector3 VRCallbackVector4 Implements IVRCallback Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax [Serializable] public class VRCallbackT<T> : UnityEvent<T>, IVRCallback Type Parameters Name Description T Constructors | Improve this Doc View Source VRCallbackT() Declaration public VRCallbackT() Methods | Improve this Doc View Source AddRuntimeListener(UnityAction<T>) For callbacks created while your program is running (i.e., from within Start(), Update(), etc.). Note that callbacks added this way will not show up in the inspector -- that is a limitation/feature of the UnityEvent* classes upon which this implmementation is based. Declaration public void AddRuntimeListener(UnityAction<T> listener) Parameters Type Name Description UnityAction <T> listener | Improve this Doc View Source InvokeWithVREvent(VREvent) Declaration public void InvokeWithVREvent(VREvent e) Parameters Type Name Description VREvent e | Improve this Doc View Source RemoveRuntimeListener(UnityAction<T>) Declaration public void RemoveRuntimeListener(UnityAction<T> listener) Parameters Type Name Description UnityAction <T> listener Implements IVRCallback"
  },
  "api/IVLab.MinVR3.VRCallbackVector2.html": {
    "href": "api/IVLab.MinVR3.VRCallbackVector2.html",
    "title": "Class VRCallbackVector2 | MinVR3",
    "keywords": "Class VRCallbackVector2 Inheritance System.Object VRCallbackT < Vector2 > VRCallbackVector2 Implements IVRCallback Inherited Members VRCallbackT<Vector2>.AddRuntimeListener(UnityAction<Vector2>) VRCallbackT<Vector2>.RemoveRuntimeListener(UnityAction<Vector2>) VRCallbackT<Vector2>.InvokeWithVREvent(VREvent) Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax [Serializable] public class VRCallbackVector2 : VRCallbackT<Vector2>, IVRCallback Methods | Improve this Doc View Source CreateRuntime(UnityAction<Vector2>) Declaration public static VRCallbackVector2 CreateRuntime(UnityAction<Vector2> callbackFunc) Parameters Type Name Description UnityAction < Vector2 > callbackFunc Returns Type Description VRCallbackVector2 Implements IVRCallback"
  },
  "api/IVLab.MinVR3.VRCallbackVector3.html": {
    "href": "api/IVLab.MinVR3.VRCallbackVector3.html",
    "title": "Class VRCallbackVector3 | MinVR3",
    "keywords": "Class VRCallbackVector3 Inheritance System.Object VRCallbackT < Vector3 > VRCallbackVector3 Implements IVRCallback Inherited Members VRCallbackT<Vector3>.AddRuntimeListener(UnityAction<Vector3>) VRCallbackT<Vector3>.RemoveRuntimeListener(UnityAction<Vector3>) VRCallbackT<Vector3>.InvokeWithVREvent(VREvent) Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax [Serializable] public class VRCallbackVector3 : VRCallbackT<Vector3>, IVRCallback Methods | Improve this Doc View Source CreateRuntime(UnityAction<Vector3>) Declaration public static VRCallbackVector3 CreateRuntime(UnityAction<Vector3> callbackFunc) Parameters Type Name Description UnityAction < Vector3 > callbackFunc Returns Type Description VRCallbackVector3 Implements IVRCallback"
  },
  "api/IVLab.MinVR3.VRCallbackVector4.html": {
    "href": "api/IVLab.MinVR3.VRCallbackVector4.html",
    "title": "Class VRCallbackVector4 | MinVR3",
    "keywords": "Class VRCallbackVector4 Inheritance System.Object VRCallbackT < Vector4 > VRCallbackVector4 Implements IVRCallback Inherited Members VRCallbackT<Vector4>.AddRuntimeListener(UnityAction<Vector4>) VRCallbackT<Vector4>.RemoveRuntimeListener(UnityAction<Vector4>) VRCallbackT<Vector4>.InvokeWithVREvent(VREvent) Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax [Serializable] public class VRCallbackVector4 : VRCallbackT<Vector4>, IVRCallback Methods | Improve this Doc View Source CreateRuntime(UnityAction<Vector4>) Declaration public static VRCallbackVector4 CreateRuntime(UnityAction<Vector4> callbackFunc) Parameters Type Name Description UnityAction < Vector4 > callbackFunc Returns Type Description VRCallbackVector4 Implements IVRCallback"
  },
  "api/IVLab.MinVR3.VRConfigSelector.html": {
    "href": "api/IVLab.MinVR3.VRConfigSelector.html",
    "title": "Class VRConfigSelector | MinVR3",
    "keywords": "Class VRConfigSelector Inheritance System.Object VRConfigSelector Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public class VRConfigSelector : MonoBehaviour Methods | Improve this Doc View Source GetConfigNames() Declaration public string[] GetConfigNames() Returns Type Description System.String [] | Improve this Doc View Source SelectConfig(String) Declaration public void SelectConfig(string name) Parameters Type Name Description System.String name"
  },
  "api/IVLab.MinVR3.VRConvert.html": {
    "href": "api/IVLab.MinVR3.VRConvert.html",
    "title": "Class VRConvert | MinVR3",
    "keywords": "Class VRConvert Inheritance System.Object VRConvert Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public class VRConvert Methods | Improve this Doc View Source ToDoubleArray(Matrix4x4) Declaration public static double[] ToDoubleArray(Matrix4x4 m) Parameters Type Name Description Matrix4x4 m Returns Type Description System.Double [] | Improve this Doc View Source ToDoubleArray(Vector3) Declaration public static double[] ToDoubleArray(Vector3 v) Parameters Type Name Description Vector3 v Returns Type Description System.Double [] | Improve this Doc View Source ToFloatArray(Matrix4x4) Declaration public static float[] ToFloatArray(Matrix4x4 m) Parameters Type Name Description Matrix4x4 m Returns Type Description System.Single [] | Improve this Doc View Source ToFloatArray(Vector3) Declaration public static float[] ToFloatArray(Vector3 v) Parameters Type Name Description Vector3 v Returns Type Description System.Single [] | Improve this Doc View Source ToMatrix4x4(Double[]) Declaration public static Matrix4x4 ToMatrix4x4(double[] d) Parameters Type Name Description System.Double [] d Returns Type Description Matrix4x4 | Improve this Doc View Source ToMatrix4x4(Single[]) Declaration public static Matrix4x4 ToMatrix4x4(float[] d) Parameters Type Name Description System.Single [] d Returns Type Description Matrix4x4 | Improve this Doc View Source ToVector3(Double[]) Declaration public static Vector3 ToVector3(double[] d) Parameters Type Name Description System.Double [] d Returns Type Description Vector3 | Improve this Doc View Source ToVector3(Single[]) Declaration public static Vector3 ToVector3(float[] d) Parameters Type Name Description System.Single [] d Returns Type Description Vector3"
  },
  "api/IVLab.MinVR3.VREngine.html": {
    "href": "api/IVLab.MinVR3.VREngine.html",
    "title": "Class VREngine | MinVR3",
    "keywords": "Class VREngine Inheritance System.Object Singleton < VREngine > VREngine Inherited Members Singleton<VREngine>.GetInstance() Singleton<VREngine>.Instance Singleton<VREngine>.Awake() Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public class VREngine : Singleton<VREngine> Fields | Improve this Doc View Source ScriptPriority Declaration public const int ScriptPriority = -900 Field Value Type Description System.Int32 Properties | Improve this Doc View Source eventManager Declaration public VREventManager eventManager { get; } Property Value Type Description VREventManager Methods | Improve this Doc View Source OnPostRender() Declaration public void OnPostRender() | Improve this Doc View Source Start() Declaration public void Start() | Improve this Doc View Source Update() Declaration public void Update()"
  },
  "api/IVLab.MinVR3.VREvent.html": {
    "href": "api/IVLab.MinVR3.VREvent.html",
    "title": "Class VREvent | MinVR3",
    "keywords": "Class VREvent Inheritance System.Object VREvent VREventT<T> Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax [Serializable] public class VREvent : ISerializable Constructors | Improve this Doc View Source VREvent() Declaration public VREvent() | Improve this Doc View Source VREvent(SerializationInfo, StreamingContext) Declaration protected VREvent(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info System.Runtime.Serialization.StreamingContext context | Improve this Doc View Source VREvent(String) Declaration public VREvent(string eventName) Parameters Type Name Description System.String eventName Fields | Improve this Doc View Source m_DataTypeName Declaration protected string m_DataTypeName Field Value Type Description System.String | Improve this Doc View Source m_Name Declaration protected string m_Name Field Value Type Description System.String Properties | Improve this Doc View Source AvailableDataTypes Declaration public static Dictionary<string, Type> AvailableDataTypes { get; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , System.Type > | Improve this Doc View Source name Declaration public string name { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source Clone() Does a deep copy of the VREvent, subclasses override this to preserve the correct type of event. Declaration public virtual VREvent Clone() Returns Type Description VREvent | Improve this Doc View Source CreateFromJson(String) Declaration public static VREvent CreateFromJson(string eventJson) Parameters Type Name Description System.String eventJson Returns Type Description VREvent | Improve this Doc View Source GetData<T>() Declaration public T GetData<T>() Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source GetDataTypeName() Declaration public string GetDataTypeName() Returns Type Description System.String | Improve this Doc View Source GetName() Declaration public string GetName() Returns Type Description System.String | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Declaration public virtual void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info System.Runtime.Serialization.StreamingContext context | Improve this Doc View Source IsClusterSafe() True for raw VREvents created from input devices, trackers, etc. These need to be sent across the network to synchronize nodes when running in cluster mode so that all nodes receive the same input at the same time. It is also possible to use VREvents for message passing within an application, and in that case, the data might reference some local object like a GameObject. These are considered secondary (i.e., application-specific) events, and they should not be sent across the network because the reference to a local object will not transfer to another cluster node running a separate copy of the application. Instead, secondary events should be regenerated from the primary events by running the same secondary-event-producing script on each node in the cluster. Declaration public virtual bool IsClusterSafe() Returns Type Description System.Boolean | Improve this Doc View Source Matches(IVREventPrototype) Declaration public bool Matches(IVREventPrototype eventPrototype) Parameters Type Name Description IVREventPrototype eventPrototype Returns Type Description System.Boolean"
  },
  "api/IVLab.MinVR3.VREventAlias.AliasStrategy.html": {
    "href": "api/IVLab.MinVR3.VREventAlias.AliasStrategy.html",
    "title": "Enum VREventAlias.AliasStrategy | MinVR3",
    "keywords": "Enum VREventAlias.AliasStrategy Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public enum AliasStrategy Fields Name Description RenameClone RenameOriginal"
  },
  "api/IVLab.MinVR3.VREventAlias.html": {
    "href": "api/IVLab.MinVR3.VREventAlias.html",
    "title": "Class VREventAlias | MinVR3",
    "keywords": "Class VREventAlias Inheritance System.Object VREventAlias Implements IVREventFilter IVREventProducer Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public class VREventAlias : MonoBehaviour, IVREventFilter, IVREventProducer Methods | Improve this Doc View Source FilterEvent(VREvent, ref List<VREvent>) Declaration public bool FilterEvent(VREvent e, ref List<VREvent> filterResult) Parameters Type Name Description VREvent e System.Collections.Generic.List < VREvent > filterResult Returns Type Description System.Boolean | Improve this Doc View Source GetEventPrototypes() Declaration public List<IVREventPrototype> GetEventPrototypes() Returns Type Description System.Collections.Generic.List < IVREventPrototype > | Improve this Doc View Source Reset() Declaration protected virtual void Reset() Implements IVREventFilter IVREventProducer"
  },
  "api/IVLab.MinVR3.VREventCallback.html": {
    "href": "api/IVLab.MinVR3.VREventCallback.html",
    "title": "Class VREventCallback | MinVR3",
    "keywords": "Class VREventCallback Inheritance System.Object VREventCallback Implements IVREventPrototype IVRCallback IVREventListener Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax [Serializable] public class VREventCallback : IVREventPrototype, IVRCallback, IVREventListener Constructors | Improve this Doc View Source VREventCallback() Declaration public VREventCallback() Methods | Improve this Doc View Source AddRuntimeListener(UnityAction) Declaration public void AddRuntimeListener(UnityAction listener) Parameters Type Name Description UnityAction listener | Improve this Doc View Source Clone() Declaration public IVREventPrototype Clone() Returns Type Description IVREventPrototype | Improve this Doc View Source CreateRuntime(VREventPrototype, UnityAction) Declaration public static VREventCallback CreateRuntime(VREventPrototype listenForEvent, UnityAction callbackFunc = null) Parameters Type Name Description VREventPrototype listenForEvent UnityAction callbackFunc Returns Type Description VREventCallback | Improve this Doc View Source CreateRuntime(String, UnityAction) Declaration public static VREventCallback CreateRuntime(string listenForEvent, UnityAction callbackFunc = null) Parameters Type Name Description System.String listenForEvent UnityAction callbackFunc Returns Type Description VREventCallback | Improve this Doc View Source GetEventDataTypeName() Declaration public string GetEventDataTypeName() Returns Type Description System.String | Improve this Doc View Source GetEventDisplayName() Declaration public string GetEventDisplayName() Returns Type Description System.String | Improve this Doc View Source GetEventName() Declaration public string GetEventName() Returns Type Description System.String | Improve this Doc View Source InvokeWithVREvent(VREvent) Declaration public void InvokeWithVREvent(VREvent vrEvent) Parameters Type Name Description VREvent vrEvent | Improve this Doc View Source OnVREvent(VREvent) Declaration public void OnVREvent(VREvent vrEvent) Parameters Type Name Description VREvent vrEvent | Improve this Doc View Source RemoveRuntimeListener(UnityAction) Declaration public void RemoveRuntimeListener(UnityAction listener) Parameters Type Name Description UnityAction listener | Improve this Doc View Source SetEventName(String) Declaration public void SetEventName(string eventName) Parameters Type Name Description System.String eventName | Improve this Doc View Source StartListening() Declaration public void StartListening() | Improve this Doc View Source StopListening() Declaration public void StopListening() Implements IVREventPrototype IVRCallback IVREventListener"
  },
  "api/IVLab.MinVR3.VREventCallbackAny.html": {
    "href": "api/IVLab.MinVR3.VREventCallbackAny.html",
    "title": "Class VREventCallbackAny | MinVR3",
    "keywords": "Class VREventCallbackAny Inheritance System.Object VREventCallbackAny Implements IVREventPrototype IVRCallback IVREventListener Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax [Serializable] public class VREventCallbackAny : IVREventPrototype, IVRCallback, IVREventListener Constructors | Improve this Doc View Source VREventCallbackAny() Declaration public VREventCallbackAny() Methods | Improve this Doc View Source AddRuntimeListener(UnityAction) Declaration public void AddRuntimeListener(UnityAction listener) Parameters Type Name Description UnityAction listener | Improve this Doc View Source AddRuntimeListener<T>(UnityAction<T>) Declaration public void AddRuntimeListener<T>(UnityAction<T> listener) Parameters Type Name Description UnityAction <T> listener Type Parameters Name Description T | Improve this Doc View Source Clone() Declaration public IVREventPrototype Clone() Returns Type Description IVREventPrototype | Improve this Doc View Source CreateRuntime(VREventPrototype, UnityAction) Declaration public static VREventCallbackAny CreateRuntime(VREventPrototype listenForEvent, UnityAction callbackFunc = null) Parameters Type Name Description VREventPrototype listenForEvent UnityAction callbackFunc Returns Type Description VREventCallbackAny | Improve this Doc View Source CreateRuntime(String, UnityAction) Declaration public static VREventCallbackAny CreateRuntime(string listenForEvent, UnityAction callbackFunc = null) Parameters Type Name Description System.String listenForEvent UnityAction callbackFunc Returns Type Description VREventCallbackAny | Improve this Doc View Source CreateRuntime<T>(VREventPrototypeT<T>, UnityAction<T>) Declaration public static VREventCallbackAny CreateRuntime<T>(VREventPrototypeT<T> listenForEvent, UnityAction<T> callbackFunc = null) Parameters Type Name Description VREventPrototypeT <T> listenForEvent UnityAction <T> callbackFunc Returns Type Description VREventCallbackAny Type Parameters Name Description T | Improve this Doc View Source CreateRuntime<T>(String, UnityAction<T>) Declaration public static VREventCallbackAny CreateRuntime<T>(string listenForEvent, UnityAction<T> callbackFunc = null) Parameters Type Name Description System.String listenForEvent UnityAction <T> callbackFunc Returns Type Description VREventCallbackAny Type Parameters Name Description T | Improve this Doc View Source GetEventDataTypeName() Declaration public string GetEventDataTypeName() Returns Type Description System.String | Improve this Doc View Source GetEventDisplayName() Declaration public string GetEventDisplayName() Returns Type Description System.String | Improve this Doc View Source GetEventName() Declaration public string GetEventName() Returns Type Description System.String | Improve this Doc View Source InvokeWithVREvent(VREvent) Declaration public void InvokeWithVREvent(VREvent vrEvent) Parameters Type Name Description VREvent vrEvent | Improve this Doc View Source OnVREvent(VREvent) Declaration public void OnVREvent(VREvent vrEvent) Parameters Type Name Description VREvent vrEvent | Improve this Doc View Source RemoveRuntimeListener(UnityAction) Declaration public void RemoveRuntimeListener(UnityAction listener) Parameters Type Name Description UnityAction listener | Improve this Doc View Source RemoveRuntimeListener<T>(UnityAction<T>) Declaration public void RemoveRuntimeListener<T>(UnityAction<T> listener) Parameters Type Name Description UnityAction <T> listener Type Parameters Name Description T | Improve this Doc View Source SetEventDataType(String) Declaration public void SetEventDataType(string eventDataTypeName) Parameters Type Name Description System.String eventDataTypeName | Improve this Doc View Source SetEventDataType(Type) Declaration public void SetEventDataType(Type eventDataType) Parameters Type Name Description System.Type eventDataType | Improve this Doc View Source SetEventName(String) Declaration public void SetEventName(string eventName) Parameters Type Name Description System.String eventName | Improve this Doc View Source StartListening() Declaration public void StartListening() | Improve this Doc View Source StopListening() Declaration public void StopListening() | Improve this Doc View Source SupportsDataType(String) Declaration public bool SupportsDataType(string dataTypeName) Parameters Type Name Description System.String dataTypeName Returns Type Description System.Boolean | Improve this Doc View Source SupportsDataType(Type) Declaration public bool SupportsDataType(Type dataType) Parameters Type Name Description System.Type dataType Returns Type Description System.Boolean Implements IVREventPrototype IVRCallback IVREventListener"
  },
  "api/IVLab.MinVR3.VREventCallbackFloat.html": {
    "href": "api/IVLab.MinVR3.VREventCallbackFloat.html",
    "title": "Class VREventCallbackFloat | MinVR3",
    "keywords": "Class VREventCallbackFloat Inheritance System.Object VREventCallbackT < System.Single > VREventCallbackFloat Implements IVREventPrototype IVRCallback IVREventListener Inherited Members VREventCallbackT<Single>.SetEventName(String) VREventCallbackT<Single>.GetEventName() VREventCallbackT<Single>.GetEventDataTypeName() VREventCallbackT<Single>.GetEventDisplayName() VREventCallbackT<Single>.Clone() VREventCallbackT<Single>.AddRuntimeListener(UnityAction<Single>) VREventCallbackT<Single>.RemoveRuntimeListener(UnityAction<Single>) VREventCallbackT<Single>.InvokeWithVREvent(VREvent) VREventCallbackT<Single>.StartListening() VREventCallbackT<Single>.OnVREvent(VREvent) VREventCallbackT<Single>.StopListening() Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax [Serializable] public class VREventCallbackFloat : VREventCallbackT<float>, IVREventPrototype, IVRCallback, IVREventListener Methods | Improve this Doc View Source CreateRuntime(VREventPrototypeFloat, UnityAction<Single>) Declaration public static VREventCallbackFloat CreateRuntime(VREventPrototypeFloat listenForEvent, UnityAction<float> callbackFunc = null) Parameters Type Name Description VREventPrototypeFloat listenForEvent UnityAction < System.Single > callbackFunc Returns Type Description VREventCallbackFloat | Improve this Doc View Source CreateRuntime(String, UnityAction<Single>) Declaration public static VREventCallbackFloat CreateRuntime(string listenForEvent, UnityAction<float> callbackFunc = null) Parameters Type Name Description System.String listenForEvent UnityAction < System.Single > callbackFunc Returns Type Description VREventCallbackFloat Implements IVREventPrototype IVRCallback IVREventListener"
  },
  "api/IVLab.MinVR3.VREventCallbackGameObject.html": {
    "href": "api/IVLab.MinVR3.VREventCallbackGameObject.html",
    "title": "Class VREventCallbackGameObject | MinVR3",
    "keywords": "Class VREventCallbackGameObject Inheritance System.Object VREventCallbackT < GameObject > VREventCallbackGameObject Implements IVREventPrototype IVRCallback IVREventListener Inherited Members VREventCallbackT<GameObject>.SetEventName(String) VREventCallbackT<GameObject>.GetEventName() VREventCallbackT<GameObject>.GetEventDataTypeName() VREventCallbackT<GameObject>.GetEventDisplayName() VREventCallbackT<GameObject>.Clone() VREventCallbackT<GameObject>.AddRuntimeListener(UnityAction<GameObject>) VREventCallbackT<GameObject>.RemoveRuntimeListener(UnityAction<GameObject>) VREventCallbackT<GameObject>.InvokeWithVREvent(VREvent) VREventCallbackT<GameObject>.StartListening() VREventCallbackT<GameObject>.OnVREvent(VREvent) VREventCallbackT<GameObject>.StopListening() Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax [Serializable] public class VREventCallbackGameObject : VREventCallbackT<GameObject>, IVREventPrototype, IVRCallback, IVREventListener Methods | Improve this Doc View Source CreateInEditor(VREventPrototypeGameObject, UnityAction<GameObject>) Declaration public static VREventCallbackGameObject CreateInEditor(VREventPrototypeGameObject listenForEvent, UnityAction<GameObject> callbackFunc = null) Parameters Type Name Description VREventPrototypeGameObject listenForEvent UnityAction < GameObject > callbackFunc Returns Type Description VREventCallbackGameObject | Improve this Doc View Source CreateInEditor(String, UnityAction<GameObject>) Declaration public static VREventCallbackGameObject CreateInEditor(string listenForEvent, UnityAction<GameObject> callbackFunc = null) Parameters Type Name Description System.String listenForEvent UnityAction < GameObject > callbackFunc Returns Type Description VREventCallbackGameObject | Improve this Doc View Source CreateRuntime(VREventPrototypeGameObject, UnityAction<GameObject>) Declaration public static VREventCallbackGameObject CreateRuntime(VREventPrototypeGameObject listenForEvent, UnityAction<GameObject> callbackFunc = null) Parameters Type Name Description VREventPrototypeGameObject listenForEvent UnityAction < GameObject > callbackFunc Returns Type Description VREventCallbackGameObject | Improve this Doc View Source CreateRuntime(String, UnityAction<GameObject>) Declaration public static VREventCallbackGameObject CreateRuntime(string listenForEvent, UnityAction<GameObject> callbackFunc = null) Parameters Type Name Description System.String listenForEvent UnityAction < GameObject > callbackFunc Returns Type Description VREventCallbackGameObject Implements IVREventPrototype IVRCallback IVREventListener"
  },
  "api/IVLab.MinVR3.VREventCallbackInt.html": {
    "href": "api/IVLab.MinVR3.VREventCallbackInt.html",
    "title": "Class VREventCallbackInt | MinVR3",
    "keywords": "Class VREventCallbackInt Inheritance System.Object VREventCallbackT < System.Int32 > VREventCallbackInt Implements IVREventPrototype IVRCallback IVREventListener Inherited Members VREventCallbackT<Int32>.SetEventName(String) VREventCallbackT<Int32>.GetEventName() VREventCallbackT<Int32>.GetEventDataTypeName() VREventCallbackT<Int32>.GetEventDisplayName() VREventCallbackT<Int32>.Clone() VREventCallbackT<Int32>.AddRuntimeListener(UnityAction<Int32>) VREventCallbackT<Int32>.RemoveRuntimeListener(UnityAction<Int32>) VREventCallbackT<Int32>.InvokeWithVREvent(VREvent) VREventCallbackT<Int32>.StartListening() VREventCallbackT<Int32>.OnVREvent(VREvent) VREventCallbackT<Int32>.StopListening() Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax [Serializable] public class VREventCallbackInt : VREventCallbackT<int>, IVREventPrototype, IVRCallback, IVREventListener Methods | Improve this Doc View Source CreateRuntime(VREventPrototypeInt, UnityAction<Int32>) Declaration public static VREventCallbackInt CreateRuntime(VREventPrototypeInt listenForEvent, UnityAction<int> callbackFunc = null) Parameters Type Name Description VREventPrototypeInt listenForEvent UnityAction < System.Int32 > callbackFunc Returns Type Description VREventCallbackInt | Improve this Doc View Source CreateRuntime(String, UnityAction<Int32>) Declaration public static VREventCallbackInt CreateRuntime(string listenForEvent, UnityAction<int> callbackFunc = null) Parameters Type Name Description System.String listenForEvent UnityAction < System.Int32 > callbackFunc Returns Type Description VREventCallbackInt Implements IVREventPrototype IVRCallback IVREventListener"
  },
  "api/IVLab.MinVR3.VREventCallbackQuaternion.html": {
    "href": "api/IVLab.MinVR3.VREventCallbackQuaternion.html",
    "title": "Class VREventCallbackQuaternion | MinVR3",
    "keywords": "Class VREventCallbackQuaternion Inheritance System.Object VREventCallbackT < Quaternion > VREventCallbackQuaternion Implements IVREventPrototype IVRCallback IVREventListener Inherited Members VREventCallbackT<Quaternion>.SetEventName(String) VREventCallbackT<Quaternion>.GetEventName() VREventCallbackT<Quaternion>.GetEventDataTypeName() VREventCallbackT<Quaternion>.GetEventDisplayName() VREventCallbackT<Quaternion>.Clone() VREventCallbackT<Quaternion>.AddRuntimeListener(UnityAction<Quaternion>) VREventCallbackT<Quaternion>.RemoveRuntimeListener(UnityAction<Quaternion>) VREventCallbackT<Quaternion>.InvokeWithVREvent(VREvent) VREventCallbackT<Quaternion>.StartListening() VREventCallbackT<Quaternion>.OnVREvent(VREvent) VREventCallbackT<Quaternion>.StopListening() Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax [Serializable] public class VREventCallbackQuaternion : VREventCallbackT<Quaternion>, IVREventPrototype, IVRCallback, IVREventListener Methods | Improve this Doc View Source CreateRuntime(VREventPrototypeQuaternion, UnityAction<Quaternion>) Declaration public static VREventCallbackQuaternion CreateRuntime(VREventPrototypeQuaternion listenForEvent, UnityAction<Quaternion> callbackFunc = null) Parameters Type Name Description VREventPrototypeQuaternion listenForEvent UnityAction < Quaternion > callbackFunc Returns Type Description VREventCallbackQuaternion | Improve this Doc View Source CreateRuntime(String, UnityAction<Quaternion>) Declaration public static VREventCallbackQuaternion CreateRuntime(string listenForEvent, UnityAction<Quaternion> callbackFunc = null) Parameters Type Name Description System.String listenForEvent UnityAction < Quaternion > callbackFunc Returns Type Description VREventCallbackQuaternion Implements IVREventPrototype IVRCallback IVREventListener"
  },
  "api/IVLab.MinVR3.VREventCallbackString.html": {
    "href": "api/IVLab.MinVR3.VREventCallbackString.html",
    "title": "Class VREventCallbackString | MinVR3",
    "keywords": "Class VREventCallbackString Inheritance System.Object VREventCallbackT < System.String > VREventCallbackString Implements IVREventPrototype IVRCallback IVREventListener Inherited Members VREventCallbackT<String>.SetEventName(String) VREventCallbackT<String>.GetEventName() VREventCallbackT<String>.GetEventDataTypeName() VREventCallbackT<String>.GetEventDisplayName() VREventCallbackT<String>.Clone() VREventCallbackT<String>.AddRuntimeListener(UnityAction<String>) VREventCallbackT<String>.RemoveRuntimeListener(UnityAction<String>) VREventCallbackT<String>.InvokeWithVREvent(VREvent) VREventCallbackT<String>.StartListening() VREventCallbackT<String>.OnVREvent(VREvent) VREventCallbackT<String>.StopListening() Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax [Serializable] public class VREventCallbackString : VREventCallbackT<string>, IVREventPrototype, IVRCallback, IVREventListener Methods | Improve this Doc View Source CreateRuntime(VREventPrototypeString, UnityAction<String>) Declaration public static VREventCallbackString CreateRuntime(VREventPrototypeString listenForEvent, UnityAction<string> callbackFunc = null) Parameters Type Name Description VREventPrototypeString listenForEvent UnityAction < System.String > callbackFunc Returns Type Description VREventCallbackString | Improve this Doc View Source CreateRuntime(String, UnityAction<String>) Declaration public static VREventCallbackString CreateRuntime(string listenForEvent, UnityAction<string> callbackFunc = null) Parameters Type Name Description System.String listenForEvent UnityAction < System.String > callbackFunc Returns Type Description VREventCallbackString Implements IVREventPrototype IVRCallback IVREventListener"
  },
  "api/IVLab.MinVR3.VREventCallbackT-1.html": {
    "href": "api/IVLab.MinVR3.VREventCallbackT-1.html",
    "title": "Class VREventCallbackT<T> | MinVR3",
    "keywords": "Class VREventCallbackT<T> Inheritance System.Object VREventCallbackT<T> VREventCallbackFloat VREventCallbackGameObject VREventCallbackInt VREventCallbackQuaternion VREventCallbackString VREventCallbackVector2 VREventCallbackVector3 VREventCallbackVector4 Implements IVREventPrototype IVRCallback IVREventListener Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax [Serializable] public class VREventCallbackT<T> : IVREventPrototype, IVRCallback, IVREventListener Type Parameters Name Description T Constructors | Improve this Doc View Source VREventCallbackT() Declaration public VREventCallbackT() Methods | Improve this Doc View Source AddRuntimeListener(UnityAction<T>) Declaration public void AddRuntimeListener(UnityAction<T> listener) Parameters Type Name Description UnityAction <T> listener | Improve this Doc View Source Clone() Declaration public IVREventPrototype Clone() Returns Type Description IVREventPrototype | Improve this Doc View Source GetEventDataTypeName() Declaration public string GetEventDataTypeName() Returns Type Description System.String | Improve this Doc View Source GetEventDisplayName() Declaration public string GetEventDisplayName() Returns Type Description System.String | Improve this Doc View Source GetEventName() Declaration public string GetEventName() Returns Type Description System.String | Improve this Doc View Source InvokeWithVREvent(VREvent) Declaration public void InvokeWithVREvent(VREvent vrEvent) Parameters Type Name Description VREvent vrEvent | Improve this Doc View Source OnVREvent(VREvent) Declaration public void OnVREvent(VREvent vrEvent) Parameters Type Name Description VREvent vrEvent | Improve this Doc View Source RemoveRuntimeListener(UnityAction<T>) Declaration public void RemoveRuntimeListener(UnityAction<T> listener) Parameters Type Name Description UnityAction <T> listener | Improve this Doc View Source SetEventName(String) Declaration public void SetEventName(string eventName) Parameters Type Name Description System.String eventName | Improve this Doc View Source StartListening() Declaration public void StartListening() | Improve this Doc View Source StopListening() Declaration public void StopListening() Implements IVREventPrototype IVRCallback IVREventListener"
  },
  "api/IVLab.MinVR3.VREventCallbackVector2.html": {
    "href": "api/IVLab.MinVR3.VREventCallbackVector2.html",
    "title": "Class VREventCallbackVector2 | MinVR3",
    "keywords": "Class VREventCallbackVector2 Inheritance System.Object VREventCallbackT < Vector2 > VREventCallbackVector2 Implements IVREventPrototype IVRCallback IVREventListener Inherited Members VREventCallbackT<Vector2>.SetEventName(String) VREventCallbackT<Vector2>.GetEventName() VREventCallbackT<Vector2>.GetEventDataTypeName() VREventCallbackT<Vector2>.GetEventDisplayName() VREventCallbackT<Vector2>.Clone() VREventCallbackT<Vector2>.AddRuntimeListener(UnityAction<Vector2>) VREventCallbackT<Vector2>.RemoveRuntimeListener(UnityAction<Vector2>) VREventCallbackT<Vector2>.InvokeWithVREvent(VREvent) VREventCallbackT<Vector2>.StartListening() VREventCallbackT<Vector2>.OnVREvent(VREvent) VREventCallbackT<Vector2>.StopListening() Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax [Serializable] public class VREventCallbackVector2 : VREventCallbackT<Vector2>, IVREventPrototype, IVRCallback, IVREventListener Methods | Improve this Doc View Source CreateRuntime(VREventPrototypeVector2, UnityAction<Vector2>) Declaration public static VREventCallbackVector2 CreateRuntime(VREventPrototypeVector2 listenForEvent, UnityAction<Vector2> callbackFunc = null) Parameters Type Name Description VREventPrototypeVector2 listenForEvent UnityAction < Vector2 > callbackFunc Returns Type Description VREventCallbackVector2 | Improve this Doc View Source CreateRuntime(String, UnityAction<Vector2>) Declaration public static VREventCallbackVector2 CreateRuntime(string listenForEvent, UnityAction<Vector2> callbackFunc = null) Parameters Type Name Description System.String listenForEvent UnityAction < Vector2 > callbackFunc Returns Type Description VREventCallbackVector2 Implements IVREventPrototype IVRCallback IVREventListener"
  },
  "api/IVLab.MinVR3.VREventCallbackVector3.html": {
    "href": "api/IVLab.MinVR3.VREventCallbackVector3.html",
    "title": "Class VREventCallbackVector3 | MinVR3",
    "keywords": "Class VREventCallbackVector3 Inheritance System.Object VREventCallbackT < Vector3 > VREventCallbackVector3 Implements IVREventPrototype IVRCallback IVREventListener Inherited Members VREventCallbackT<Vector3>.SetEventName(String) VREventCallbackT<Vector3>.GetEventName() VREventCallbackT<Vector3>.GetEventDataTypeName() VREventCallbackT<Vector3>.GetEventDisplayName() VREventCallbackT<Vector3>.Clone() VREventCallbackT<Vector3>.AddRuntimeListener(UnityAction<Vector3>) VREventCallbackT<Vector3>.RemoveRuntimeListener(UnityAction<Vector3>) VREventCallbackT<Vector3>.InvokeWithVREvent(VREvent) VREventCallbackT<Vector3>.StartListening() VREventCallbackT<Vector3>.OnVREvent(VREvent) VREventCallbackT<Vector3>.StopListening() Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax [Serializable] public class VREventCallbackVector3 : VREventCallbackT<Vector3>, IVREventPrototype, IVRCallback, IVREventListener Methods | Improve this Doc View Source CreateRuntime(VREventPrototypeVector3, UnityAction<Vector3>) Declaration public static VREventCallbackVector3 CreateRuntime(VREventPrototypeVector3 listenForEvent, UnityAction<Vector3> callbackFunc = null) Parameters Type Name Description VREventPrototypeVector3 listenForEvent UnityAction < Vector3 > callbackFunc Returns Type Description VREventCallbackVector3 | Improve this Doc View Source CreateRuntime(String, UnityAction<Vector3>) Declaration public static VREventCallbackVector3 CreateRuntime(string listenForEvent, UnityAction<Vector3> callbackFunc = null) Parameters Type Name Description System.String listenForEvent UnityAction < Vector3 > callbackFunc Returns Type Description VREventCallbackVector3 Implements IVREventPrototype IVRCallback IVREventListener"
  },
  "api/IVLab.MinVR3.VREventCallbackVector4.html": {
    "href": "api/IVLab.MinVR3.VREventCallbackVector4.html",
    "title": "Class VREventCallbackVector4 | MinVR3",
    "keywords": "Class VREventCallbackVector4 Inheritance System.Object VREventCallbackT < Vector4 > VREventCallbackVector4 Implements IVREventPrototype IVRCallback IVREventListener Inherited Members VREventCallbackT<Vector4>.SetEventName(String) VREventCallbackT<Vector4>.GetEventName() VREventCallbackT<Vector4>.GetEventDataTypeName() VREventCallbackT<Vector4>.GetEventDisplayName() VREventCallbackT<Vector4>.Clone() VREventCallbackT<Vector4>.AddRuntimeListener(UnityAction<Vector4>) VREventCallbackT<Vector4>.RemoveRuntimeListener(UnityAction<Vector4>) VREventCallbackT<Vector4>.InvokeWithVREvent(VREvent) VREventCallbackT<Vector4>.StartListening() VREventCallbackT<Vector4>.OnVREvent(VREvent) VREventCallbackT<Vector4>.StopListening() Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax [Serializable] public class VREventCallbackVector4 : VREventCallbackT<Vector4>, IVREventPrototype, IVRCallback, IVREventListener Methods | Improve this Doc View Source CreateRuntime(VREventPrototypeVector4, UnityAction<Vector4>) Declaration public static VREventCallbackVector4 CreateRuntime(VREventPrototypeVector4 listenForEvent, UnityAction<Vector4> callbackFunc = null) Parameters Type Name Description VREventPrototypeVector4 listenForEvent UnityAction < Vector4 > callbackFunc Returns Type Description VREventCallbackVector4 | Improve this Doc View Source CreateRuntime(String, UnityAction<Vector4>) Declaration public static VREventCallbackVector4 CreateRuntime(string listenForEvent, UnityAction<Vector4> callbackFunc = null) Parameters Type Name Description System.String listenForEvent UnityAction < Vector4 > callbackFunc Returns Type Description VREventCallbackVector4 Implements IVREventPrototype IVRCallback IVREventListener"
  },
  "api/IVLab.MinVR3.VREventFloat.html": {
    "href": "api/IVLab.MinVR3.VREventFloat.html",
    "title": "Class VREventFloat | MinVR3",
    "keywords": "Class VREventFloat Inheritance System.Object VREvent VREventT < System.Single > VREventFloat Inherited Members VREventT<Single>.data VREventT<Single>.GetData() VREventT<Single>.GetObjectData(SerializationInfo, StreamingContext) VREventT<Single>.m_Data VREvent.name VREvent.GetName() VREvent.GetDataTypeName() VREvent.GetData<T>() VREvent.Matches(IVREventPrototype) VREvent.CreateFromJson(String) VREvent.IsClusterSafe() VREvent.m_Name VREvent.m_DataTypeName VREvent.AvailableDataTypes Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax [Serializable] public class VREventFloat : VREventT<float>, ISerializable Constructors | Improve this Doc View Source VREventFloat(String, Single) Declaration public VREventFloat(string name, float data) Parameters Type Name Description System.String name System.Single data Methods | Improve this Doc View Source Clone() Declaration public override VREvent Clone() Returns Type Description VREvent Overrides VREvent.Clone()"
  },
  "api/IVLab.MinVR3.VREventGameObject.html": {
    "href": "api/IVLab.MinVR3.VREventGameObject.html",
    "title": "Class VREventGameObject | MinVR3",
    "keywords": "Class VREventGameObject Inheritance System.Object VREvent VREventT < GameObject > VREventGameObject Inherited Members VREventT<GameObject>.data VREventT<GameObject>.GetData() VREventT<GameObject>.GetObjectData(SerializationInfo, StreamingContext) VREventT<GameObject>.m_Data VREvent.name VREvent.GetName() VREvent.GetDataTypeName() VREvent.GetData<T>() VREvent.Matches(IVREventPrototype) VREvent.CreateFromJson(String) VREvent.m_Name VREvent.m_DataTypeName VREvent.AvailableDataTypes Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax [Serializable] public class VREventGameObject : VREventT<GameObject>, ISerializable Constructors | Improve this Doc View Source VREventGameObject(String, GameObject) Declaration public VREventGameObject(string name, GameObject data) Parameters Type Name Description System.String name GameObject data Methods | Improve this Doc View Source Clone() Declaration public override VREvent Clone() Returns Type Description VREvent Overrides VREvent.Clone() | Improve this Doc View Source IsClusterSafe() Declaration public override bool IsClusterSafe() Returns Type Description System.Boolean Overrides VREvent.IsClusterSafe()"
  },
  "api/IVLab.MinVR3.VREventInt.html": {
    "href": "api/IVLab.MinVR3.VREventInt.html",
    "title": "Class VREventInt | MinVR3",
    "keywords": "Class VREventInt Inheritance System.Object VREvent VREventT < System.Int32 > VREventInt Inherited Members VREventT<Int32>.data VREventT<Int32>.GetData() VREventT<Int32>.GetObjectData(SerializationInfo, StreamingContext) VREventT<Int32>.m_Data VREvent.name VREvent.GetName() VREvent.GetDataTypeName() VREvent.GetData<T>() VREvent.Matches(IVREventPrototype) VREvent.CreateFromJson(String) VREvent.IsClusterSafe() VREvent.m_Name VREvent.m_DataTypeName VREvent.AvailableDataTypes Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax [Serializable] public class VREventInt : VREventT<int>, ISerializable Constructors | Improve this Doc View Source VREventInt(String, Int32) Declaration public VREventInt(string name, int data) Parameters Type Name Description System.String name System.Int32 data Methods | Improve this Doc View Source Clone() Declaration public override VREvent Clone() Returns Type Description VREvent Overrides VREvent.Clone()"
  },
  "api/IVLab.MinVR3.VREventManager.html": {
    "href": "api/IVLab.MinVR3.VREventManager.html",
    "title": "Class VREventManager | MinVR3",
    "keywords": "Class VREventManager Inheritance System.Object VREventManager Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public class VREventManager : MonoBehaviour Fields | Improve this Doc View Source DefaultListenerPriority Declaration public const int DefaultListenerPriority = 10 Field Value Type Description System.Int32 | Improve this Doc View Source m_ShowDebuggingOutput Declaration public bool m_ShowDebuggingOutput Field Value Type Description System.Boolean | Improve this Doc View Source ScriptPriority Declaration public const int ScriptPriority = -899 Field Value Type Description System.Int32 Methods | Improve this Doc View Source AddEventFilter(IVREventFilter) Declaration public void AddEventFilter(IVREventFilter filter) Parameters Type Name Description IVREventFilter filter | Improve this Doc View Source AddEventFilter(IVREventFilter, Int32) Add an event filter and specify the priority (index) with which it should be run relative to other event filters. Declaration public void AddEventFilter(IVREventFilter filter, int priority) Parameters Type Name Description IVREventFilter filter System.Int32 priority | Improve this Doc View Source AddEventListener(IVREventListener, Int32) Declaration public void AddEventListener(IVREventListener listener, int priority = 10) Parameters Type Name Description IVREventListener listener System.Int32 priority | Improve this Doc View Source AddPolledInputDevice(IPolledInputDevice) Declaration public void AddPolledInputDevice(IPolledInputDevice device) Parameters Type Name Description IPolledInputDevice device | Improve this Doc View Source GetAllEventPrototypes() Not fast; intended only for populating dropdown lists in the Unity Editor Declaration public static List<IVREventPrototype> GetAllEventPrototypes() Returns Type Description System.Collections.Generic.List < IVREventPrototype > A list of all events produced by all sources | Improve this Doc View Source GetEventQueue() Declaration public List<VREvent> GetEventQueue() Returns Type Description System.Collections.Generic.List < VREvent > | Improve this Doc View Source GetMatchingEventPrototypes(String, Boolean) Not fast; intended only for populating dropdown lists in the Unity Editor. For a given data type, the dataTypeString should be equal to the value returned by typeof(T).Name. The string \"\" will match events that do not have a data payload, and the wildcard character * will match events of any datatype. Declaration public static List<IVREventPrototype> GetMatchingEventPrototypes(string dataTypeName, bool includeInactive = true) Parameters Type Name Description System.String dataTypeName System.Boolean includeInactive Returns Type Description System.Collections.Generic.List < IVREventPrototype > A list of all events with the specified datatype produced by all sources | Improve this Doc View Source InsertInQueue(VREvent) Declaration public void InsertInQueue(VREvent e) Parameters Type Name Description VREvent e | Improve this Doc View Source PollInputDevices() Declaration public void PollInputDevices() | Improve this Doc View Source ProcessEvent(VREvent) Declaration public void ProcessEvent(VREvent e) Parameters Type Name Description VREvent e | Improve this Doc View Source ProcessEventQueue() Declaration public void ProcessEventQueue() | Improve this Doc View Source QueueEvent(VREvent) Declaration public void QueueEvent(VREvent e) Parameters Type Name Description VREvent e | Improve this Doc View Source RemoveEventFilter(IVREventFilter) Declaration public void RemoveEventFilter(IVREventFilter filter) Parameters Type Name Description IVREventFilter filter | Improve this Doc View Source RemoveEventListener(IVREventListener) Declaration public void RemoveEventListener(IVREventListener listener) Parameters Type Name Description IVREventListener listener | Improve this Doc View Source RemovePolledInputDevice(IPolledInputDevice) Declaration public void RemovePolledInputDevice(IPolledInputDevice device) Parameters Type Name Description IPolledInputDevice device | Improve this Doc View Source SetEventQueue(List<VREvent>) Declaration public void SetEventQueue(List<VREvent> newQueue) Parameters Type Name Description System.Collections.Generic.List < VREvent > newQueue | Improve this Doc View Source Update() Declaration public void Update()"
  },
  "api/IVLab.MinVR3.VREventPrototype.html": {
    "href": "api/IVLab.MinVR3.VREventPrototype.html",
    "title": "Class VREventPrototype | MinVR3",
    "keywords": "Class VREventPrototype Inheritance System.Object VREventPrototype Implements IVREventPrototype Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax [Serializable] public class VREventPrototype : IVREventPrototype Constructors | Improve this Doc View Source VREventPrototype() Declaration public VREventPrototype() Fields | Improve this Doc View Source m_EventName Declaration protected string m_EventName Field Value Type Description System.String Methods | Improve this Doc View Source Clone() Declaration public virtual IVREventPrototype Clone() Returns Type Description IVREventPrototype | Improve this Doc View Source Create(String) Declaration public static VREventPrototype Create(string eventName) Parameters Type Name Description System.String eventName Returns Type Description VREventPrototype | Improve this Doc View Source GetEventDataTypeName() Declaration public string GetEventDataTypeName() Returns Type Description System.String | Improve this Doc View Source GetEventDisplayName() Declaration public string GetEventDisplayName() Returns Type Description System.String | Improve this Doc View Source GetEventName() Declaration public string GetEventName() Returns Type Description System.String | Improve this Doc View Source SetEventName(String) Declaration public void SetEventName(string eventName) Parameters Type Name Description System.String eventName Implements IVREventPrototype"
  },
  "api/IVLab.MinVR3.VREventPrototypeAny.html": {
    "href": "api/IVLab.MinVR3.VREventPrototypeAny.html",
    "title": "Class VREventPrototypeAny | MinVR3",
    "keywords": "Class VREventPrototypeAny Inheritance System.Object VREventPrototypeAny Implements IVREventPrototype Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax [Serializable] public class VREventPrototypeAny : IVREventPrototype Constructors | Improve this Doc View Source VREventPrototypeAny() Declaration public VREventPrototypeAny() Properties | Improve this Doc View Source AllEventPrototypes Declaration public Dictionary<string, IVREventPrototype> AllEventPrototypes { get; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , IVREventPrototype > Methods | Improve this Doc View Source Clone() Declaration public IVREventPrototype Clone() Returns Type Description IVREventPrototype | Improve this Doc View Source Create(String) Declaration public static VREventPrototypeAny Create(string eventName) Parameters Type Name Description System.String eventName Returns Type Description VREventPrototypeAny | Improve this Doc View Source Create<T>(String) Declaration public static VREventPrototypeAny Create<T>(string eventName) Parameters Type Name Description System.String eventName Returns Type Description VREventPrototypeAny Type Parameters Name Description T | Improve this Doc View Source DataTypeLocked() Declaration public bool DataTypeLocked() Returns Type Description System.Boolean | Improve this Doc View Source GetEventDataTypeName() Declaration public string GetEventDataTypeName() Returns Type Description System.String | Improve this Doc View Source GetEventDisplayName() Declaration public string GetEventDisplayName() Returns Type Description System.String | Improve this Doc View Source GetEventName() Declaration public string GetEventName() Returns Type Description System.String | Improve this Doc View Source LockDataType() Declaration public void LockDataType() | Improve this Doc View Source SetEventDataType(String) Declaration public void SetEventDataType(string eventDataTypeName) Parameters Type Name Description System.String eventDataTypeName | Improve this Doc View Source SetEventDataType(Type) Declaration public void SetEventDataType(Type eventDataType) Parameters Type Name Description System.Type eventDataType | Improve this Doc View Source SetEventName(String) Declaration public void SetEventName(string eventName) Parameters Type Name Description System.String eventName | Improve this Doc View Source SupportsDataType(String) Declaration public bool SupportsDataType(string dataTypeName) Parameters Type Name Description System.String dataTypeName Returns Type Description System.Boolean | Improve this Doc View Source SupportsDataType(Type) Declaration public bool SupportsDataType(Type dataType) Parameters Type Name Description System.Type dataType Returns Type Description System.Boolean | Improve this Doc View Source UnlockDataType() Declaration public void UnlockDataType() Implements IVREventPrototype"
  },
  "api/IVLab.MinVR3.VREventPrototypeFloat.html": {
    "href": "api/IVLab.MinVR3.VREventPrototypeFloat.html",
    "title": "Class VREventPrototypeFloat | MinVR3",
    "keywords": "Class VREventPrototypeFloat Inheritance System.Object VREventPrototypeT < System.Single > VREventPrototypeFloat Implements IVREventPrototype Inherited Members VREventPrototypeT<Single>.GetEventName() VREventPrototypeT<Single>.SetEventName(String) VREventPrototypeT<Single>.GetEventDataTypeName() VREventPrototypeT<Single>.GetEventDisplayName() VREventPrototypeT<Single>.m_EventName Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax [Serializable] public class VREventPrototypeFloat : VREventPrototypeT<float>, IVREventPrototype Methods | Improve this Doc View Source Clone() Declaration public override IVREventPrototype Clone() Returns Type Description IVREventPrototype Overrides IVLab.MinVR3.VREventPrototypeT<System.Single>.Clone() | Improve this Doc View Source Create(String) Declaration public static VREventPrototypeFloat Create(string eventName) Parameters Type Name Description System.String eventName Returns Type Description VREventPrototypeFloat Implements IVREventPrototype"
  },
  "api/IVLab.MinVR3.VREventPrototypeGameObject.html": {
    "href": "api/IVLab.MinVR3.VREventPrototypeGameObject.html",
    "title": "Class VREventPrototypeGameObject | MinVR3",
    "keywords": "Class VREventPrototypeGameObject Inheritance System.Object VREventPrototypeT < GameObject > VREventPrototypeGameObject Implements IVREventPrototype Inherited Members VREventPrototypeT<GameObject>.GetEventName() VREventPrototypeT<GameObject>.SetEventName(String) VREventPrototypeT<GameObject>.GetEventDataTypeName() VREventPrototypeT<GameObject>.GetEventDisplayName() VREventPrototypeT<GameObject>.m_EventName Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax [Serializable] public class VREventPrototypeGameObject : VREventPrototypeT<GameObject>, IVREventPrototype Methods | Improve this Doc View Source Clone() Declaration public override IVREventPrototype Clone() Returns Type Description IVREventPrototype Overrides IVLab.MinVR3.VREventPrototypeT<GameObject>.Clone() | Improve this Doc View Source Create(String) Declaration public static VREventPrototypeGameObject Create(string eventName) Parameters Type Name Description System.String eventName Returns Type Description VREventPrototypeGameObject Implements IVREventPrototype"
  },
  "api/IVLab.MinVR3.VREventPrototypeInt.html": {
    "href": "api/IVLab.MinVR3.VREventPrototypeInt.html",
    "title": "Class VREventPrototypeInt | MinVR3",
    "keywords": "Class VREventPrototypeInt Inheritance System.Object VREventPrototypeT < System.Int32 > VREventPrototypeInt Implements IVREventPrototype Inherited Members VREventPrototypeT<Int32>.GetEventName() VREventPrototypeT<Int32>.SetEventName(String) VREventPrototypeT<Int32>.GetEventDataTypeName() VREventPrototypeT<Int32>.GetEventDisplayName() VREventPrototypeT<Int32>.m_EventName Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax [Serializable] public class VREventPrototypeInt : VREventPrototypeT<int>, IVREventPrototype Methods | Improve this Doc View Source Clone() Declaration public override IVREventPrototype Clone() Returns Type Description IVREventPrototype Overrides IVLab.MinVR3.VREventPrototypeT<System.Int32>.Clone() | Improve this Doc View Source Create(String) Declaration public static VREventPrototypeInt Create(string eventName) Parameters Type Name Description System.String eventName Returns Type Description VREventPrototypeInt Implements IVREventPrototype"
  },
  "api/IVLab.MinVR3.VREventPrototypeQuaternion.html": {
    "href": "api/IVLab.MinVR3.VREventPrototypeQuaternion.html",
    "title": "Class VREventPrototypeQuaternion | MinVR3",
    "keywords": "Class VREventPrototypeQuaternion Inheritance System.Object VREventPrototypeT < Quaternion > VREventPrototypeQuaternion Implements IVREventPrototype Inherited Members VREventPrototypeT<Quaternion>.GetEventName() VREventPrototypeT<Quaternion>.SetEventName(String) VREventPrototypeT<Quaternion>.GetEventDataTypeName() VREventPrototypeT<Quaternion>.GetEventDisplayName() VREventPrototypeT<Quaternion>.m_EventName Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax [Serializable] public class VREventPrototypeQuaternion : VREventPrototypeT<Quaternion>, IVREventPrototype Methods | Improve this Doc View Source Clone() Declaration public override IVREventPrototype Clone() Returns Type Description IVREventPrototype Overrides IVLab.MinVR3.VREventPrototypeT<Quaternion>.Clone() | Improve this Doc View Source Create(String) Declaration public static VREventPrototypeQuaternion Create(string eventName) Parameters Type Name Description System.String eventName Returns Type Description VREventPrototypeQuaternion Implements IVREventPrototype"
  },
  "api/IVLab.MinVR3.VREventPrototypeString.html": {
    "href": "api/IVLab.MinVR3.VREventPrototypeString.html",
    "title": "Class VREventPrototypeString | MinVR3",
    "keywords": "Class VREventPrototypeString Inheritance System.Object VREventPrototypeT < System.String > VREventPrototypeString Implements IVREventPrototype Inherited Members VREventPrototypeT<String>.GetEventName() VREventPrototypeT<String>.SetEventName(String) VREventPrototypeT<String>.GetEventDataTypeName() VREventPrototypeT<String>.GetEventDisplayName() VREventPrototypeT<String>.m_EventName Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax [Serializable] public class VREventPrototypeString : VREventPrototypeT<string>, IVREventPrototype Methods | Improve this Doc View Source Clone() Declaration public override IVREventPrototype Clone() Returns Type Description IVREventPrototype Overrides IVLab.MinVR3.VREventPrototypeT<System.String>.Clone() | Improve this Doc View Source Create(String) Declaration public static VREventPrototypeString Create(string eventName) Parameters Type Name Description System.String eventName Returns Type Description VREventPrototypeString Implements IVREventPrototype"
  },
  "api/IVLab.MinVR3.VREventPrototypeT-1.html": {
    "href": "api/IVLab.MinVR3.VREventPrototypeT-1.html",
    "title": "Class VREventPrototypeT<T> | MinVR3",
    "keywords": "Class VREventPrototypeT<T> Inheritance System.Object VREventPrototypeT<T> VREventPrototypeFloat VREventPrototypeGameObject VREventPrototypeInt VREventPrototypeQuaternion VREventPrototypeString VREventPrototypeVector2 VREventPrototypeVector3 VREventPrototypeVector4 Implements IVREventPrototype Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax [Serializable] public class VREventPrototypeT<T> : IVREventPrototype Type Parameters Name Description T Constructors | Improve this Doc View Source VREventPrototypeT() Declaration public VREventPrototypeT() Fields | Improve this Doc View Source m_EventName Declaration protected string m_EventName Field Value Type Description System.String Methods | Improve this Doc View Source Clone() Declaration public virtual IVREventPrototype Clone() Returns Type Description IVREventPrototype | Improve this Doc View Source GetEventDataTypeName() Declaration public string GetEventDataTypeName() Returns Type Description System.String | Improve this Doc View Source GetEventDisplayName() Declaration public string GetEventDisplayName() Returns Type Description System.String | Improve this Doc View Source GetEventName() Declaration public string GetEventName() Returns Type Description System.String | Improve this Doc View Source SetEventName(String) Declaration public void SetEventName(string eventName) Parameters Type Name Description System.String eventName Implements IVREventPrototype"
  },
  "api/IVLab.MinVR3.VREventPrototypeVector2.html": {
    "href": "api/IVLab.MinVR3.VREventPrototypeVector2.html",
    "title": "Class VREventPrototypeVector2 | MinVR3",
    "keywords": "Class VREventPrototypeVector2 Inheritance System.Object VREventPrototypeT < Vector2 > VREventPrototypeVector2 Implements IVREventPrototype Inherited Members VREventPrototypeT<Vector2>.GetEventName() VREventPrototypeT<Vector2>.SetEventName(String) VREventPrototypeT<Vector2>.GetEventDataTypeName() VREventPrototypeT<Vector2>.GetEventDisplayName() VREventPrototypeT<Vector2>.m_EventName Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax [Serializable] public class VREventPrototypeVector2 : VREventPrototypeT<Vector2>, IVREventPrototype Methods | Improve this Doc View Source Clone() Declaration public override IVREventPrototype Clone() Returns Type Description IVREventPrototype Overrides IVLab.MinVR3.VREventPrototypeT<Vector2>.Clone() | Improve this Doc View Source Create(String) Declaration public static VREventPrototypeVector2 Create(string eventName) Parameters Type Name Description System.String eventName Returns Type Description VREventPrototypeVector2 Implements IVREventPrototype"
  },
  "api/IVLab.MinVR3.VREventPrototypeVector3.html": {
    "href": "api/IVLab.MinVR3.VREventPrototypeVector3.html",
    "title": "Class VREventPrototypeVector3 | MinVR3",
    "keywords": "Class VREventPrototypeVector3 Inheritance System.Object VREventPrototypeT < Vector3 > VREventPrototypeVector3 Implements IVREventPrototype Inherited Members VREventPrototypeT<Vector3>.GetEventName() VREventPrototypeT<Vector3>.SetEventName(String) VREventPrototypeT<Vector3>.GetEventDataTypeName() VREventPrototypeT<Vector3>.GetEventDisplayName() VREventPrototypeT<Vector3>.m_EventName Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax [Serializable] public class VREventPrototypeVector3 : VREventPrototypeT<Vector3>, IVREventPrototype Methods | Improve this Doc View Source Clone() Declaration public override IVREventPrototype Clone() Returns Type Description IVREventPrototype Overrides IVLab.MinVR3.VREventPrototypeT<Vector3>.Clone() | Improve this Doc View Source Create(String) Declaration public static VREventPrototypeVector3 Create(string eventName) Parameters Type Name Description System.String eventName Returns Type Description VREventPrototypeVector3 Implements IVREventPrototype"
  },
  "api/IVLab.MinVR3.VREventPrototypeVector4.html": {
    "href": "api/IVLab.MinVR3.VREventPrototypeVector4.html",
    "title": "Class VREventPrototypeVector4 | MinVR3",
    "keywords": "Class VREventPrototypeVector4 Inheritance System.Object VREventPrototypeT < Vector4 > VREventPrototypeVector4 Implements IVREventPrototype Inherited Members VREventPrototypeT<Vector4>.GetEventName() VREventPrototypeT<Vector4>.SetEventName(String) VREventPrototypeT<Vector4>.GetEventDataTypeName() VREventPrototypeT<Vector4>.GetEventDisplayName() VREventPrototypeT<Vector4>.m_EventName Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax [Serializable] public class VREventPrototypeVector4 : VREventPrototypeT<Vector4>, IVREventPrototype Methods | Improve this Doc View Source Clone() Declaration public override IVREventPrototype Clone() Returns Type Description IVREventPrototype Overrides IVLab.MinVR3.VREventPrototypeT<Vector4>.Clone() | Improve this Doc View Source Create(String) Declaration public static VREventPrototypeVector4 Create(string eventName) Parameters Type Name Description System.String eventName Returns Type Description VREventPrototypeVector4 Implements IVREventPrototype"
  },
  "api/IVLab.MinVR3.VREventQuaternion.html": {
    "href": "api/IVLab.MinVR3.VREventQuaternion.html",
    "title": "Class VREventQuaternion | MinVR3",
    "keywords": "Class VREventQuaternion Inheritance System.Object VREvent VREventT < Quaternion > VREventQuaternion Inherited Members VREventT<Quaternion>.data VREventT<Quaternion>.GetData() VREventT<Quaternion>.GetObjectData(SerializationInfo, StreamingContext) VREventT<Quaternion>.m_Data VREvent.name VREvent.GetName() VREvent.GetDataTypeName() VREvent.GetData<T>() VREvent.Matches(IVREventPrototype) VREvent.CreateFromJson(String) VREvent.IsClusterSafe() VREvent.m_Name VREvent.m_DataTypeName VREvent.AvailableDataTypes Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax [Serializable] public class VREventQuaternion : VREventT<Quaternion>, ISerializable Constructors | Improve this Doc View Source VREventQuaternion(String, Quaternion) Declaration public VREventQuaternion(string name, Quaternion data) Parameters Type Name Description System.String name Quaternion data Methods | Improve this Doc View Source Clone() Declaration public override VREvent Clone() Returns Type Description VREvent Overrides VREvent.Clone()"
  },
  "api/IVLab.MinVR3.VREventString.html": {
    "href": "api/IVLab.MinVR3.VREventString.html",
    "title": "Class VREventString | MinVR3",
    "keywords": "Class VREventString Inheritance System.Object VREvent VREventT < System.String > VREventString Inherited Members VREventT<String>.data VREventT<String>.GetData() VREventT<String>.GetObjectData(SerializationInfo, StreamingContext) VREventT<String>.m_Data VREvent.name VREvent.GetName() VREvent.GetDataTypeName() VREvent.GetData<T>() VREvent.Matches(IVREventPrototype) VREvent.CreateFromJson(String) VREvent.IsClusterSafe() VREvent.m_Name VREvent.m_DataTypeName VREvent.AvailableDataTypes Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax [Serializable] public class VREventString : VREventT<string>, ISerializable Constructors | Improve this Doc View Source VREventString(String, String) Declaration public VREventString(string name, string data) Parameters Type Name Description System.String name System.String data Methods | Improve this Doc View Source Clone() Declaration public override VREvent Clone() Returns Type Description VREvent Overrides VREvent.Clone()"
  },
  "api/IVLab.MinVR3.VREventT-1.html": {
    "href": "api/IVLab.MinVR3.VREventT-1.html",
    "title": "Class VREventT<T> | MinVR3",
    "keywords": "Class VREventT<T> Inheritance System.Object VREvent VREventT<T> VREventFloat VREventGameObject VREventInt VREventQuaternion VREventString VREventVector2 VREventVector3 VREventVector4 Inherited Members VREvent.name VREvent.GetName() VREvent.GetDataTypeName() VREvent.GetData<T>() VREvent.Matches(IVREventPrototype) VREvent.Clone() VREvent.CreateFromJson(String) VREvent.IsClusterSafe() VREvent.m_Name VREvent.m_DataTypeName VREvent.AvailableDataTypes Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax [Serializable] public class VREventT<T> : VREvent, ISerializable Type Parameters Name Description T Constructors | Improve this Doc View Source VREventT() Declaration protected VREventT() | Improve this Doc View Source VREventT(SerializationInfo, StreamingContext) Declaration protected VREventT(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info System.Runtime.Serialization.StreamingContext context | Improve this Doc View Source VREventT(String, T) Declaration protected VREventT(string eventName, T eventData) Parameters Type Name Description System.String eventName T eventData Fields | Improve this Doc View Source m_Data Declaration protected T m_Data Field Value Type Description T Properties | Improve this Doc View Source data Declaration public T data { get; } Property Value Type Description T Methods | Improve this Doc View Source GetData() Declaration public T GetData() Returns Type Description T | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info System.Runtime.Serialization.StreamingContext context Overrides VREvent.GetObjectData(SerializationInfo, StreamingContext)"
  },
  "api/IVLab.MinVR3.VREventTypeRepr.html": {
    "href": "api/IVLab.MinVR3.VREventTypeRepr.html",
    "title": "Class VREventTypeRepr | MinVR3",
    "keywords": "Class VREventTypeRepr String representation of a VREvent Type, useful for choosing VREvent producer types with unknown origin Inheritance System.Object VREventTypeRepr Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax [Serializable] public class VREventTypeRepr Properties | Improve this Doc View Source EventDataType Declaration public Type EventDataType { get; } Property Value Type Description System.Type Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/IVLab.MinVR3.VREventVector2.html": {
    "href": "api/IVLab.MinVR3.VREventVector2.html",
    "title": "Class VREventVector2 | MinVR3",
    "keywords": "Class VREventVector2 Inheritance System.Object VREvent VREventT < Vector2 > VREventVector2 Inherited Members VREventT<Vector2>.data VREventT<Vector2>.GetData() VREventT<Vector2>.GetObjectData(SerializationInfo, StreamingContext) VREventT<Vector2>.m_Data VREvent.name VREvent.GetName() VREvent.GetDataTypeName() VREvent.GetData<T>() VREvent.Matches(IVREventPrototype) VREvent.CreateFromJson(String) VREvent.IsClusterSafe() VREvent.m_Name VREvent.m_DataTypeName VREvent.AvailableDataTypes Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax [Serializable] public class VREventVector2 : VREventT<Vector2>, ISerializable Constructors | Improve this Doc View Source VREventVector2(String, Vector2) Declaration public VREventVector2(string name, Vector2 data) Parameters Type Name Description System.String name Vector2 data Methods | Improve this Doc View Source Clone() Declaration public override VREvent Clone() Returns Type Description VREvent Overrides VREvent.Clone()"
  },
  "api/IVLab.MinVR3.VREventVector3.html": {
    "href": "api/IVLab.MinVR3.VREventVector3.html",
    "title": "Class VREventVector3 | MinVR3",
    "keywords": "Class VREventVector3 Inheritance System.Object VREvent VREventT < Vector3 > VREventVector3 Inherited Members VREventT<Vector3>.data VREventT<Vector3>.GetData() VREventT<Vector3>.GetObjectData(SerializationInfo, StreamingContext) VREventT<Vector3>.m_Data VREvent.name VREvent.GetName() VREvent.GetDataTypeName() VREvent.GetData<T>() VREvent.Matches(IVREventPrototype) VREvent.CreateFromJson(String) VREvent.IsClusterSafe() VREvent.m_Name VREvent.m_DataTypeName VREvent.AvailableDataTypes Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax [Serializable] public class VREventVector3 : VREventT<Vector3>, ISerializable Constructors | Improve this Doc View Source VREventVector3(String, Vector3) Declaration public VREventVector3(string name, Vector3 data) Parameters Type Name Description System.String name Vector3 data Methods | Improve this Doc View Source Clone() Declaration public override VREvent Clone() Returns Type Description VREvent Overrides VREvent.Clone()"
  },
  "api/IVLab.MinVR3.VREventVector4.html": {
    "href": "api/IVLab.MinVR3.VREventVector4.html",
    "title": "Class VREventVector4 | MinVR3",
    "keywords": "Class VREventVector4 Inheritance System.Object VREvent VREventT < Vector4 > VREventVector4 Inherited Members VREventT<Vector4>.data VREventT<Vector4>.GetData() VREventT<Vector4>.GetObjectData(SerializationInfo, StreamingContext) VREventT<Vector4>.m_Data VREvent.name VREvent.GetName() VREvent.GetDataTypeName() VREvent.GetData<T>() VREvent.Matches(IVREventPrototype) VREvent.CreateFromJson(String) VREvent.IsClusterSafe() VREvent.m_Name VREvent.m_DataTypeName VREvent.AvailableDataTypes Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax [Serializable] public class VREventVector4 : VREventT<Vector4>, ISerializable Constructors | Improve this Doc View Source VREventVector4(String, Vector4) Declaration public VREventVector4(string name, Vector4 data) Parameters Type Name Description System.String name Vector4 data Methods | Improve this Doc View Source Clone() Declaration public override VREvent Clone() Returns Type Description VREvent Overrides VREvent.Clone()"
  },
  "api/IVLab.MinVR3.WebSocketVREventConnection.html": {
    "href": "api/IVLab.MinVR3.WebSocketVREventConnection.html",
    "title": "Class WebSocketVREventConnection | MinVR3",
    "keywords": "Class WebSocketVREventConnection WebSocket-based network connection for VREvents. Can be used with a Web Browser. Inheritance System.Object WebSocketVREventConnection Implements IVREventConnection Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public class WebSocketVREventConnection : MonoBehaviour, IVREventConnection Properties | Improve this Doc View Source OnVREventReceived Declaration public IVREventConnection.VREventReceivedDelegate OnVREventReceived { get; set; } Property Value Type Description IVREventConnection.VREventReceivedDelegate Methods | Improve this Doc View Source Send(in VREvent) Declaration public void Send(in VREvent evt) Parameters Type Name Description VREvent evt Implements IVREventConnection"
  },
  "api/IVLab.MinVR3.WindowSettings.html": {
    "href": "api/IVLab.MinVR3.WindowSettings.html",
    "title": "Class WindowSettings | MinVR3",
    "keywords": "Class WindowSettings Inheritance System.Object WindowSettings Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public class WindowSettings : MonoBehaviour Fields | Improve this Doc View Source hasBorder Declaration public bool hasBorder Field Value Type Description System.Boolean | Improve this Doc View Source title Declaration public string title Field Value Type Description System.String | Improve this Doc View Source windowHeight Declaration public int windowHeight Field Value Type Description System.Int32 | Improve this Doc View Source windowWidth Declaration public int windowWidth Field Value Type Description System.Int32 | Improve this Doc View Source windowXPos Declaration public int windowXPos Field Value Type Description System.Int32 | Improve this Doc View Source windowYPos Declaration public int windowYPos Field Value Type Description System.Int32"
  },
  "api/IVLab.MinVR3.WindowUtils.html": {
    "href": "api/IVLab.MinVR3.WindowUtils.html",
    "title": "Class WindowUtils | MinVR3",
    "keywords": "Class WindowUtils Inheritance System.Object WindowUtils Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public class WindowUtils Methods | Improve this Doc View Source RemoveBorder() Declaration public static void RemoveBorder() | Improve this Doc View Source SetPositionAndSize(Int32, Int32, Int32, Int32) Declaration public static void SetPositionAndSize(int x, int y, int resX, int resY) Parameters Type Name Description System.Int32 x System.Int32 y System.Int32 resX System.Int32 resY | Improve this Doc View Source SetWindowTitle(String) Declaration public static void SetWindowTitle(string title) Parameters Type Name Description System.String title"
  },
  "api/IVLab.MinVR3.XMLUtils.html": {
    "href": "api/IVLab.MinVR3.XMLUtils.html",
    "title": "Class XMLUtils | MinVR3",
    "keywords": "Class XMLUtils Inheritance System.Object XMLUtils Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public class XMLUtils Methods | Improve this Doc View Source FindNth(String, String, Int32) Declaration public static int FindNth(string str, string substr, int n) Parameters Type Name Description System.String str System.String substr System.Int32 n Returns Type Description System.Int32 | Improve this Doc View Source GetNextXMLFieldName(String) Declaration public static string GetNextXMLFieldName(string input) Parameters Type Name Description System.String input Returns Type Description System.String | Improve this Doc View Source GetXMLField(String, String, ref Dictionary<String, String>, ref String, ref String) Declaration public static bool GetXMLField(string input, string fieldName, ref Dictionary<string, string> propertiesAndValues, ref string fieldData, ref string leftoverInput) Parameters Type Name Description System.String input System.String fieldName System.Collections.Generic.Dictionary < System.String , System.String > propertiesAndValues System.String fieldData System.String leftoverInput Returns Type Description System.Boolean | Improve this Doc View Source NumSubstringOccurances(String, String) Declaration public static int NumSubstringOccurances(string str, string substr) Parameters Type Name Description System.String str System.String substr Returns Type Description System.Int32 | Improve this Doc View Source WriteXMLField(String, Dictionary<String, String>, String) Declaration public static string WriteXMLField(string fieldName, Dictionary<string, string> propertiesAndValues, string fieldData) Parameters Type Name Description System.String fieldName System.Collections.Generic.Dictionary < System.String , System.String > propertiesAndValues System.String fieldData Returns Type Description System.String"
  },
  "api/IVLab.MinVR3.zSpace.html": {
    "href": "api/IVLab.MinVR3.zSpace.html",
    "title": "Class zSpace | MinVR3",
    "keywords": "Class zSpace Grabs input from the zSpace using the zCore library and converts head tracking and stylus input to VREvents. The dependency on zSpace's zCore API means this only works in Unity 2019.x for now. Inheritance System.Object zSpace Implements IPolledInputDevice IVREventProducer Namespace : IVLab.MinVR3 Assembly : api-documentation.dll Syntax public class zSpace : MonoBehaviour, IPolledInputDevice, IVREventProducer Methods | Improve this Doc View Source GetEventPrototypes() Declaration public List<IVREventPrototype> GetEventPrototypes() Returns Type Description System.Collections.Generic.List < IVREventPrototype > | Improve this Doc View Source PollForEvents(ref List<VREvent>) Declaration public void PollForEvents(ref List<VREvent> eventQueue) Parameters Type Name Description System.Collections.Generic.List < VREvent > eventQueue Implements IPolledInputDevice IVREventProducer"
  },
  "api/MinVR.BlitFisheye.html": {
    "href": "api/MinVR.BlitFisheye.html",
    "title": "Class BlitFisheye | MinVR3",
    "keywords": "Class BlitFisheye Inheritance System.Object BlitFisheye Namespace : MinVR Assembly : api-documentation.dll Syntax public class BlitFisheye : MonoBehaviour Fields | Improve this Doc View Source overrideBlit Declaration public bool overrideBlit Field Value Type Description System.Boolean"
  },
  "api/MinVR.FisheyeCameraSetup.html": {
    "href": "api/MinVR.FisheyeCameraSetup.html",
    "title": "Class FisheyeCameraSetup | MinVR3",
    "keywords": "Class FisheyeCameraSetup Inheritance System.Object FisheyeCameraSetup Namespace : MinVR Assembly : api-documentation.dll Syntax public class FisheyeCameraSetup : MonoBehaviour"
  },
  "api/MinVR.html": {
    "href": "api/MinVR.html",
    "title": "Namespace MinVR | MinVR3",
    "keywords": "Namespace MinVR Classes BlitFisheye FisheyeCameraSetup"
  },
  "index.html": {
    "href": "index.html",
    "title": "MinVR3 Unity Package | MinVR3",
    "keywords": "MinVR3 Unity Package This is the 3rd incarnation of \"MinVR\", a VR (really XR) open source toolkit designed to support research in XR, spatial user interfaces, pen and touch interfaces, and 3D data visualization. MinVR3 has been developed by the University of Minnesota's Interactive Visualization Lab , building upon collaborations in past MinVRs with Brown University and Macalester College. Getting Started Follow the Installation Guide to incorporate the main MinVR3 package into your project. Optionally, install Plugin Packages to enable extra functionality. Introduction to MinVR3 Key classes organized by theme / functionality"
  },
  "manual/01-intro.html": {
    "href": "manual/01-intro.html",
    "title": "MinVR3 Unity Package | MinVR3",
    "keywords": "MinVR3 Unity Package This in the 3rd incarnation of \"MinVR\", an open source toolkit designed to support experiental and creative research in XR, spatial user interfaces, pen and touch interfaces, and 3D data visualization. MinVR3 is being created because research practice has evolved in recent years to, almost exclusively, rely upon the Unity game and C# scripting. MinVR2 included some early support for Unity via a UnityClient that could be used together with a MinVR2 server application written in C++ to deliver input events and handle synchronization for cluster rendering. In contrast, MinVR3 embraces Unity as the supported platform. It drops explicit support for C++ graphics engines and adds native Unity/C# support for running the same code on multiple VR configurations , input device drivers beyond those supported by Unity , projection-based and other less common displays , sharing events across remote connections , and synchronized cluster rendering . Several of these features have their roots in earlier versions of MinVR, but MinVR3 is not a direct port to C#. It reimagines how the useful past concepts realized in a C++ development environment will best function for programming with C# in the Unity Editor. For example, MinVR3 introduces the idea of VREventPrototypes . These are extensible in the sense that new prototypes can be added to the system, but less flexible than the event data index used in MinVR2. However, the advantage of pre-defining the type of data produced by each event is huge for programmers working within the Unity Editor. This means that MinVR3 can provide a dropdown list of valid events produced by all of the devices, filters, and event aliases in the scene whenever a programmer needs to assign an event to a listener. High-Level Goals and Design Decisions Goal 1: Take advantage of recent commercially available hardware and game engine support for XR. Design Decision: Embrace Unity. We cannot do a better job than Unity at: a) rapid development using existing assets and packages contributed by the community, b) publishing online tutorials and examples to introduce XR programming in Unity to new programmers, c) developing and maintaining a build system that can deploy interactive graphics programs to the wide range of headset and mobile devices that are coming to market and that often run their own operating systems and their own custom device drivers, and d) probably many other things. Goal 2: Support a wide variety of displays (e.g., CAVE's, PowerWalls, multi-touch stereoscopic tables, 3DTV's, head-mounted displays). The heart of our research program is exploring how we will interact with computers 20 years from now. We need to be able to imagine and prototype what those interactive visualization devices of the future might look like, not just support the commercially available devices of today. Design Decision: Since Unity's support for this is generally poor, MinVR should provide this support in the form of scripts, prefabs and/or drivers for outputting Unity graphics to a variety of displays. Design Decision: This also implies support for running in a cluster mode and/or multi-viewport mode with frame-level synchronization of input events and stereoscopic rendering. This is required for many multi-projector displays. Goal 3: Support a wide variety of input devices (e.g., optical trackers, multi-touch input devices, haptic devices, home-built devices) following the same logic as G2 . Design Decision: Unity's support is great for commercially available game and XR controllers, desktop systems, and mobile devices like tablets and phones, but it is not good for what had previously been the standard in the VR community (VRPN) and almost all of the \"more interesting\" input devices we have used previously in the lab for our research. MinVR should provide input device drivers for these devices. Goal 4: Make apps configurable, so the same application can be run on multiple of these XR input/display device combinations without refactoring or rebuilding the application. An application written for a Quest or Vive should also be able to run in a desktop mode or in a VR environment where there are no controllers present, like Google Cardboard. Design Decision: Unity's XR system provides some early support for building one application that can run on multiple similar XR devices by providing a common abstraction for XRControllers and XRHMDs. Our goal requires the application to be able to not just switch between which XR device it uses but also switch between using an XR device and a completely different device, like a tablet or desktop. Technically, Unity supports all these things, what is needed to achieve the goal is more like a wrapper and programming convention on top of Unity. Like the config files for different VR platforms used in past versions of MinVR, we need some way to toggle portions of the scene hierarchy on/off and adjust configuration settings based upon the current platform. MinVR should provide this. Design Decision: Some abstraction around the input events that the various hardware devices produce is also needed. All past versions of MinVR and the even earlier toolkits we have used at Brown University and then UMN were based on a flexible system of input events and aliases that are not necessarily associated with a particular controller, making it possible to produce compatible events from multiple different controllers. Unity's New Input System is close in spirit to this. For example, it makes it possible to bind inputs from multiple specific devices to more generic actions, like \"jump\", \"fire\", or \"cancel\". However, it does not yet work for many of the devices Unity supports, and writing new device drivers seems to require treating each device like a game controller with a current state represented in memory where changes to that state trigger events. Our past approaches seem more flexible and direct. Event produces generate Events and add them to the event queue. These producers do not need to be tied to a physical device or even state in memory. They could be a menu object that produces a \"ItemSelected\" event. The beauty of our past designs is that this ItemSelected event is really no different than a \"D-Pad Down\" event, so these events can be used interchangeably in finite state machines and other user interface code. MinVR3 should continue to utilize its own VREvent system rather than pipe events through Unity's New Input System. However, we should continue to closely watch Unity's progress as they move the system out of preview and into production. If it continues to get closer and closer to what we have found useful in the past, then it may be advantageous to reimplement some or all of MinVR to use InputActions so that we can remain more compatible with Unity and leverage all their development. In the meantime, MinVR should support translating Unity InputActions into VREvents and translating VREvents into Unity InputActions so that developers can take advantage of other Unity XR packages as they come online. Goal 5: For fast-moving research that experiments with new hardware, we need to be able to quickly expand MinVR in ways that we will not be able to guarantee will work or even compile on every platform or in every situation in which MinVR is used. Design Decision: Similar to MinVR2, MinVR3 should implement some plugin-like mechanism to support optional extensions, especially when they introduce additional dependencies, like requiring developers to install an extra library or when they only work on specific operating systems or platforms. We think work toward these five goals will enable one more: Goal 6: Package, reuse, and distribute advanced spatial user interfaces developed through the lab's research. Work toward a Unity-based collection of the lab's spatial user interface research packaged up in the form of reusable widgets and interaction techniques. As useful, the library should also include implementations of techniques developed elsewhere, and eventually, we could accept contributions to the library from outside the lab. Design Decision: This goal is enabled by MinVR. It falls outside of the original \"minimal\" scope of MinVR, so this work will grow into its own project. (Tentative Title: Open Up: A Library of Spatial Interaction Techniques .) However, it is so closely tied to the way MinVR works and so useful to consider while developing MinVR, that we will begin by working on them together in the same repository. The scripts inside MinVR3's interaction folder are like the incubator for OpenUp. Getting Started The table of contents on the left lists the important concepts in this manual in the order recommended for new MinVR users. The main page for API Documentation organizes the major classes and interfaces by theme / frequency of use."
  },
  "manual/02-install.html": {
    "href": "manual/02-install.html",
    "title": "To install MinVR3 in a Unity Project | MinVR3",
    "keywords": "To install MinVR3 in a Unity Project Prereqs MinVR3 will eventually become an open source public project. For now, it is only avaialble internally within the lab. To access it, you will need to have SSH access to github.umn.edu and be a member of the IV/LAB Organization on github.umn.edu. Create a GitHub SSH key for your UMN GitHub account on your development machine. Unity has trouble sshing with passwords; just leave the password for this key blank. If you cannot see the IV/LAB Organization on github.umn.edu , then ask the Current Lab GitHub and Software Development Czar to please add you to the org. Install via the Unity Package Manager To use the package in a read-only mode, the same way you would for packages downloaded directly from Unity: In Unity, open Window -> Package Manager. Click the + button Select Add package from git URL Paste git@github.umn.edu:ivlab-cs/MinVR3-UnityPackage.git for the latest package Optionally, install any of the MinVR Plugin Packages to enable extra functionality. Development Mode Collectively, the lab now recommends a development process where you start by adding the package to your project in read-only mode, as described above. This way, your Unity project files will always maintain a link to download the latest version of the package from git whenever the project is loaded, and all users of the package will be including it the same way. If/when you have a need to edit the package, the process is then to \"temporarily\" switch into development mode by cloning a temporary copy of the package. Then, edit this source as needed, test your edits for as long as you like, etc. When you get to a good stopping point, commit and push the changes to github from within this temporary clone inside the Packages directory . Once the latest version of your package is on github, you can then \"switch out of development mode\" by deleting the cloned repo. This will cause Unity to revert to using the read-only version of the package, which it keeps in its internal package cache, and we can trigger Unity to update this version to the latest by removing the packages-lock.json file. In summary: Follow the read-only mode steps above. Navigate your terminal or Git tool into your Unity project's main folder and clone this repository into the packages folder, e.g., cd Packages; git clone git@github.umn.edu:ivlab-cs/Template-UnityPackage.git . This will create a Template folder that contains all the sourcecode in the package. Go for it. Edit the source you just checked out; add files, etc. However, BE VERY CAREFUL NOT TO ADD THE Template-UnityPackage FOLDER TO YOUR PROJECT'S GIT REPO. We are essentially cloning one git repo inside another here, but we do not want to add the package repo as a submodule or subdirectory of the project's repo, we just want to temporarily work with the source. When you are ready to commit and push changes to the package repo, go for it. JUST MAKE SURE YOU DO THIS FROM WITHIN THE Packages/Template-UnityPackage DIRECTORY! Once these changes are up on github, you can switch out of \"development mode\" by simply deleting the Template-UnityPackage directory. The presence of that directory is like a temporary override. Once it is gone, Unity will revert back to using the cached version of Template that it originally downloaded from git. The final step is to force a refresh of the package cache so that Unity will pull in the new version of the package you just saved to github. To do this, simply delete the packages-lock.json file inside your project's Packages folder."
  },
  "manual/03-plugin-packages.html": {
    "href": "manual/03-plugin-packages.html",
    "title": "MinVR3 Plugin Packages | MinVR3",
    "keywords": "MinVR3 Plugin Packages These packages integrate with the main MinVR3 package to provide additional functionality, typically to support input or display devices that require external dependencies. All of these plugins are installed via the Unity Package Manager. The installation instructions are the same as for the main MinVR3 package, only the name of the package git URL changes: 1. In Unity, open Window -> Package Manager. 2. Click the ```+``` button 3. Select ```Add package from git URL``` 4. Paste ```git@github.umn.edu:ivlab-cs/PackageName-UnityPackage.git```, where \"PackageName\" will change for each package listed below. Available Packages Package Name Functionality / Notes git repo Sensel Reads data from a Sensel Morph pressure-sensitive multi-touch devices and translates input to VREvents. git@github.umn.edu:ivlab-cs/Sensel-UnityPackage.git TUIO11 Reads touch data sent over a network connection via the TUIO protocol. TUIO servers and simulators are available for many touch devices and platforms. git@github.umn.edu:ivlab-cs/TUIO11-UnityPackage.git WebSocket Makes it possible to use the scripts in Scripts/Connection to make a MinVR Unity program talk (send/receive VREvents) with a webpage. git@github.umn.edu:ivlab-cs/WebSocket-UnityPackage.git XR Interaction Toolkit Makes it possible to use Unity's XR Interaction Toolkit and New Event System side-by-side with MinVR. VREvents can be combined into a MinVRController that implements the XRController interface that the XR Interaction Toolkit expects. AND, input from any XRControllers that Unity knows about can also be converted into VREvents. Install the XR Interaction Toolkit package from Unity. zCore6 Provides support for zSpace input and display devices via their zCore 6.0 API. Note: The API (and hence this support) only works on Unity 2019. git@github.umn.edu:ivlab-cs/zCore6-UnityPackage.git Under the Hood Some key logic for making these packages \"optional\" is contained in the MinVR3/Runtime/IVLab.MinVR3.Runtime.asmdef file, which you can see/edit within the Unity editor by clicking on the filename in the Project view. Notice that each of the packages is listed as what we will call a \"soft-dependency\" of the main Runtime package. Also, notice the rules toward the bottom of the asmdef file. When Unity finds that a the package is available, it sets a #define of the form PACKAGENAME_PRESENT. If the package is not found, PACKAGENAME_PRESENT is left undefined. Code inside the main MinVR3 package can then be compiled conditionally depending upon the presence of a certain package by placing it inside an #if PACKAGENAME_PRESENT ... #endif block. In this way, the main MinVR package compiles regardless of whether any of the optional packages are present, but functionality is limited to the features supported by installed packages."
  },
  "manual/10-vr-coord-spaces.html": {
    "href": "manual/10-vr-coord-spaces.html",
    "title": "VR Coordinate Spaces | MinVR3",
    "keywords": "VR Coordinate Spaces VR Coordinate Spaces (A More Careful) Introduction to Unity's Coordinate Spaces Local vs. World vs. Parent in the Hierarchy Common Confusions with Unity's Transform Class Extensions to the MinVR Transform class MinVRRoot (RoomSpace Origin) Link to VRGems article Working with Coordinate Spaces in Code Conversion Naming Variables to Help"
  },
  "manual/11-vrconfigs.html": {
    "href": "manual/11-vrconfigs.html",
    "title": "VRConfigs for Multi-Platform VR Development | MinVR3",
    "keywords": "VRConfigs for Multi-Platform VR Development VRConfigs Goal to be able to run the same app in: Cave, Google Cardboard, or Quest by simply changing a configuration setting, not refactoring the whole project. Walkthrough an Example Prefabs combine Display(s) + InputDevices Aliases"
  },
  "manual/12-vrevents.html": {
    "href": "manual/12-vrevents.html",
    "title": "VREvent System | MinVR3",
    "keywords": "VREvent System Events, Prototypes, and Aliases Types of VREvents Accessing data carried by events VREventPrototypes VREventAliases Listening for VREvents VREventCallbacks SimpleEventListener Advanced Topics Event Filters Injecting \"Derived Events\" into the Queue example VREventType_GameObject Sending VREvents (back) to Unity's Input System This should only be done for input from devices that Unity does not already support. One useful example is to combine VRPN tracking and button events (which cannot be read by Unity's input system) in a virtual, Unity-style XRController. This makes it possible to use custom VR devices, like those used in the CAVE, with Unity's XR Interaction Toolkit, including it's built-in support for interacting with 2D UIs displayed on Unity world-space Canvases. Support for this piping of VREvents (backwards) into the Unity Input System is only planned to be supported for the New Input System with the XR Interaction Toolkit. Technically it is possible with the Legacy Input Module, but it is a fair amount of work, and it may be best to upgrade applications instead of diving into that work. Add Unity's XRInteraction Toolkit package to your project. This defines the XRController base class. Create a new GameObject and add a Runtime/Scripts/Input/MinVRToUnity/MinVRController.cs MinVRController to it. Adjust its properties to drive the position, rotation, and buttons of the controller using VREvents. Use input from this controller to drive interactions (grabbing, teleporting, etc.) supported out of the box with the XR Interaction Toolkit And/or, use it to drive interaction with Unity UI (canvases, physics raycasting). For this, you need to add Unity's XRUIInputModule to a gameobject somewhere in your scene AND you need to add a TrackedDeviceRaycaster component to each Canvas that you wish to interact with. Adding a VREvent type that carries a new type of Data"
  },
  "manual/13-input-devices.html": {
    "href": "manual/13-input-devices.html",
    "title": "Input Devices | MinVR3",
    "keywords": "Input Devices Classes that connect to hardware input devices or their software drivers to capture user input should implement the IVREventProducer interface in order to send @IVLab.MinVR3.VREvent\\s to MinVR's VREventManager . For devices already supported by Unity , we recommend simply creating a virtual input device that converts input from Unity to VREvents. As you see in the list below, these have already been developed for most of the devices handled by Unity, and it is extend these existing scripts or add new ones. For devices not supported by Unity , new support can be added by writing a class that reads data from the device and implements the IVREventProducer interface in order to send @IVLab.MinVR3.VREvent\\s to MinVR's VREventManager . If the device requires an external library or code that will only compile on some platforms, then implement the driver as a MinVR plugin package so that it does not add a required external dependency to the main MinVR package. Devices to Support Various Types of Input Misc InputActionsToVREvents [Requires: New Input System] - This class converts Unity InputActions to VREvents. It should work with any input devices that Unity can convert to InputActions, which will eventually be everything Unity supports. Right now, there are a lot of devices that are not yet supported, like the Quest and mobile phones and tablets. 6-DOF Trackers, XR Controllers UnityXR - Converts tracking, button, and axis data from devices supported by Unity's XRInputSubsystem into VREvents. VRPN [Requires VRPN Plugin Package] - Support is planned for VRPN; it exists in MinVR2 and just needs to be ported over. zSpace [Requires zSpace Plugin Package, which runs on Unity2019 only] - Support for the zSpace Device. Converts tracking data for the head and tracking and button data for the 3D pen to VREvents. Touch Input TouchBuiltin - Coverts touch data from devices supported by UnityEngine.Input into VREvents. TouchTuio [Requires TUIO11 Plugin Package] - Coverts touch data received over the network from a TUIO server into VREvents. TouchTuio [Requires Sensel Plugin Package] - Coverts touch data from a Sensel Morph device into VREvents. Phone and Tablet Sensors: MobileSensors - Converts gyro rotation, heading, and acceleration data from devices supported by UnityEngine.Input into VREvents. Mouse and Keyboard MouseAndKeyboard - Converts mouse and keyboard input to VREvents. Automatically switches between accessing the data via the New Input System or the Legacy InputModule based on what is enabled in the current project."
  },
  "manual/14-display-devices.html": {
    "href": "manual/14-display-devices.html",
    "title": "Display Devices | MinVR3",
    "keywords": "Display Devices Supported Displays TrackedProjectionScreen and its many uses. Fisheye rendering for CAVEs. WarpedProjection rendering for AR/MR art installations (copy over from Augmented Paafu Mat project) Calibration Techniques"
  },
  "manual/15-remote-connections.html": {
    "href": "manual/15-remote-connections.html",
    "title": "Remote Connections | MinVR3",
    "keywords": "Remote Connections MinVR apps can communicate with remote applications or services by sending VREvents across the network. This can be done in two different modes. Remote Connections (described on this page) are for situations where the goal is to pass messages or data. VREvents are also shared across the network when running MinVR in a cluster mode , but this is for strict frame-level synchronization on multiple machines that are connected on a fast, local network to render on tiled displays. TODO: Bridger"
  },
  "manual/16-cluster.html": {
    "href": "manual/16-cluster.html",
    "title": "Cluster Mode | MinVR3",
    "keywords": "Cluster Mode Cluster mode provides support for tiled displays powered by a cluster of graphics computers. Key features are: Frame-level dual or quad-buffered rendering synchronization (i.e., swap lock) Frame-level event synchronization (i.e., VREvents are synchronized across all nodes each frame, and any node can act as the original event generator)."
  },
  "manual/20-interaction.html": {
    "href": "manual/20-interaction.html",
    "title": "Interaction Techniques | MinVR3",
    "keywords": "Interaction Techniques This work will grow into its own project. (Tentative Title: Open Up: A Library of Spatial Interaction Techniques .) However, it is so closely tied to the way MinVR works and so useful to consider while developing MinVR, that we will begin by working on them together in the same repository. The scripts inside MinVR3's interaction folder are like the incubator for OpenUp."
  },
  "manual/changelog.html": {
    "href": "manual/changelog.html",
    "title": "| MinVR3",
    "keywords": ""
  },
  "manual/license.html": {
    "href": "manual/license.html",
    "title": "| MinVR3",
    "keywords": "Copyright 2020,2021,2022 Regents of the University of Minnesota, All Rights Reserved"
  }
}