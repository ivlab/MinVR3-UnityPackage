using UnityEngine;
using System.Collections.Generic;

namespace IVLab.MinVR3 {

    /* Genertates fake VREvents for 3 trackers (usually assigned to the head and 2 hands).  This is similar to the 
	 * XR Device Simulator provided with Unity's XR Interaction Toolkit, but this is a simpler simulator and has better
	 * mouse and keyboard controls (IMHO).
	 * 
	 * This is only intended to be used while debugging and testing; not for an actual deployed VR app!
	 * 
	 * To make debugging VR apps easier, you can use the mouse and keyboard to create 'fake' input for two trackers.
	 * "Press the '1' or '2' key to switch between controlling tracker1 or tracker2. Move the mouse around the screen
	 * to move the 3D position of that tracker within a plane parallel to the screen.  Hold down 'left shift' while
	 * moving the mouse vertically to change the 3D depth. Hold 'x', 'y', or 'z' while moving the mouse horizontally
	 * to rotate the tracker around the X, Y, or Z axis.
	 * 
	 * Move the head around with the arrow keys.
	 */
    public class FakeTrackingInput : MonoBehaviour, IVREventProducer {
        [Tooltip("Fake head tracking with arrow keys. 'up' moves forward, 'down' moves backward, 'left' rotates left, 'right' rotates right.")]
        public string headTrackerBaseName = "Head";

        public Vector3 initialHeadPos = new Vector3(0, 1, -2);
        private Vector3 headTrackerPos;

        public Vector3 initialHeadRot = new Vector3();
        private Quaternion headTrackerRot;

        [Tooltip("Base name of the VREvent generated by the first fake tracker.")]
        public string tracker1BaseName = "DHand";

        public Vector3 initialTracker1Pos = new Vector3(0, 0, 0);
        private Vector3 tracker1Pos;
        public Vector3 initialTracker1Rot = new Vector3();
        private Quaternion tracker1Rot;

        [Tooltip("Base name of the VREvent generated by the second fake tracker.")]
        public string tracker2BaseName = "NDHand";

        public Vector3 initialTracker2Pos = new Vector3(0, 0, 0);
        private Vector3 tracker2Pos;
        public Vector3 initialTracker2Rot = new Vector3();
        private Quaternion tracker2Rot;

        private int curTracker = 0;
        private float lastx = float.NaN;
        private float lasty = float.NaN;


        private void OnEnable()
        {
            VREngine.main.eventManager.AddEventProducer(this);
        }

        private void OnDisable()
        {
            VREngine.main.eventManager.RemoveEventProducer(this);
        }

        void Start() {
            headTrackerPos = initialHeadPos;
            headTrackerRot = Quaternion.Euler(initialHeadRot);
            tracker1Pos = initialTracker1Pos;
            tracker1Rot = Quaternion.Euler(initialTracker1Rot);
            tracker2Pos = initialTracker2Pos;
            tracker2Rot = Quaternion.Euler(initialTracker1Rot);
        }

        void Update()
        {
            QueueHeadTrackerEvents();
            QueueRegularTrackerEvents();
        }

        private void QueueHeadTrackerEvents() {
            if (Input.GetKey("up")) {
                headTrackerPos += 0.1f * Camera.main.transform.forward;
            }
            else if (Input.GetKey("down")) {
                headTrackerPos -= 0.1f * Camera.main.transform.forward;
            }
            else if (Input.GetKey("left")) {
                headTrackerRot *= Quaternion.AngleAxis(-1.0f, new Vector3(0f, 1f, 0f));
            }
            else if (Input.GetKey("right")) {
                headTrackerRot *= Quaternion.AngleAxis(1.0f, new Vector3(0f, 1f, 0f));
            }

            VREngine.main.eventManager.QueueEvent(headTrackerBaseName + "/Position", headTrackerPos);
            VREngine.main.eventManager.QueueEvent(headTrackerBaseName + "/Rotation", headTrackerRot);
        }


        private void QueueRegularTrackerEvents() {
            float x = Input.mousePosition.x;
            float y = Input.mousePosition.y;
            // first time through
            if (float.IsNaN(lastx)) {
                lastx = x;
                lasty = y;
                return;
            }

            if (Input.GetKeyDown("1")) {
                curTracker = 0;
            }
            else if (Input.GetKeyDown("2")) {
                curTracker = 1;
            }

            if (Input.GetKey("x")) {
                float angle = 0.1f * (x - lastx);
                if (curTracker == 0) {
                    tracker1Rot = Quaternion.AngleAxis(angle, new Vector3(1f, 0f, 0f)) * tracker1Rot;
                }
                else if (curTracker == 1) {
                    tracker2Rot = Quaternion.AngleAxis(angle, new Vector3(1f, 0f, 0f)) * tracker2Rot;
                }
            }
            else if (Input.GetKey("y")) {
                float angle = 0.1f * (x - lastx);
                if (curTracker == 0) {
                    tracker1Rot = Quaternion.AngleAxis(angle, new Vector3(0f, 1f, 0f)) * tracker1Rot;
                }
                else if (curTracker == 1) {
                    tracker2Rot = Quaternion.AngleAxis(angle, new Vector3(0f, 1f, 0f)) * tracker2Rot;
                }
            }
            else if (Input.GetKey("z")) {
                float angle = 0.1f * (x - lastx);
                if (curTracker == 0) {
                    tracker1Rot = Quaternion.AngleAxis(angle, new Vector3(0f, 0f, 1f)) * tracker1Rot;
                }
                else if (curTracker == 1) {
                    tracker2Rot = Quaternion.AngleAxis(angle, new Vector3(0f, 0f, 1f)) * tracker2Rot;
                }
            }
            else if (Input.GetKey("left shift")) {
                float depth = 0.005f * (y - lasty);
                if (curTracker == 0) {
                    tracker1Pos += depth * Camera.main.transform.forward;
                }
                else if (curTracker == 1) {
                    tracker2Pos += depth * Camera.main.transform.forward;
                }
            }
            else {
                Ray ray = Camera.main.ScreenPointToRay(new Vector3(x, y, 0f));
                Plane p = new Plane();
                float dist = 0.0f;
                if (curTracker == 0) {
                    p.SetNormalAndPosition(-Camera.main.transform.forward, tracker1Pos);
                    if (p.Raycast(ray, out dist)) {
                        tracker1Pos = ray.GetPoint(dist);
                    }
                }
                else if (curTracker == 1) {
                    p.SetNormalAndPosition(-Camera.main.transform.forward, tracker2Pos);
                    if (p.Raycast(ray, out dist)) {
                        tracker2Pos = ray.GetPoint(dist);
                    }
                }

            }

            // for fake traker 1
            VREngine.main.eventManager.QueueEvent(tracker1BaseName + "/Position", tracker1Pos);
            VREngine.main.eventManager.QueueEvent(tracker1BaseName + "/Rotation", tracker1Rot);

            // for fake traker 2
            VREngine.main.eventManager.QueueEvent(tracker1BaseName + "/Position", tracker1Pos);
            VREngine.main.eventManager.QueueEvent(tracker1BaseName + "/Rotation", tracker1Rot);

            this.lastx = x;
            this.lasty = y;
        }

        public Dictionary<string, string> GetEventNamesAndTypes()
        {
            Dictionary<string, string> allEvents = new Dictionary<string, string>();
            allEvents.Add(headTrackerBaseName + "/Position", "Vector3");
            allEvents.Add(headTrackerBaseName + "/Rotation", "Quaternion");

            allEvents.Add(tracker1BaseName + "/Position", "Vector3");
            allEvents.Add(tracker1BaseName + "/Rotation", "Quaternion");

            allEvents.Add(tracker2BaseName + "/Position", "Vector3");
            allEvents.Add(tracker2BaseName + "/Rotation", "Quaternion");

            return allEvents;
        }
    }

} // namespace
